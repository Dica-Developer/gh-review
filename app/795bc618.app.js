!function(a){"use strict";a.module("GHReview",["ui.router","ui.select","ui.bootstrap","cfp.hotkeys","LocalStorageModule","ngSanitize","ngAnimate","hljs"]).config(["localStorageServiceProvider","$urlRouterProvider",function(a,b){a.setPrefix("ghreview");var c=!1;b.otherwise("/").rule(function(a,b){var d=a.get("authenticated"),e=a.get("collectComments"),f=d.get(),g=b.path();return"/"===g||"/login"===g||"/welcome"===g||f?(!c&&f&&(c=!0,e()),"/welcome"===g&&f?b.replace().path("/filter"):b.abbsUrl):b.replace().path("/welcome")})}])}(angular),function(a){"use strict";a.module("GHReview").constant("options",{github:{clientId:"833c028df47be8e881d9",apiScope:"user, repo",redirectUri:"https://dica-developer.github.io/gh-review/oauth/",accessTokenUrl:"https://gh-review.herokuapp.com/login/oauth/access_token",rootUrl:"https://dica-developer.github.io/gh-review/"},ghReview:{version:"0.6.18"}})}(angular),function(a){"use strict";a.module("GHReview").config(["$stateProvider",function(a){a.state("login",{url:"/login",controller:"LoginController"}).state("logout",{url:"/logout",controller:"LogoutController"})}])}(angular),function(a){"use strict";a.module("GHReview").controller("LoginController",["$scope","$window","options",function(a,b,c){var d="https://github.com/login/oauth/authorize?client_id="+c.github.clientId+"&redirect_uri="+c.github.redirectUri+"&scope="+c.github.apiScope;b.location.href=d}])}(angular),function(){"use strict";angular.module("GHReview").controller("LogoutController",["$state","localStorageService",function(a,b){b.remove("accessToken"),a.go("welcome")}])}(),function(a){"use strict";a.module("GHReview").controller("CommitController",["$injector","$scope","$stateParams",function(a,b,c){var d,e,f,g,h=a.get("_"),i=a.get("Comment"),j=a.get("Commit"),k=a.get("ghUser"),l=a.get("events");k.get().then(function(a){b.loggedInUser=a}),b.commit=new j(c),b.commit.getCommit(c).then(function(a){b.commitResponse=a;var c=a.html_url.split("/");b.commitRepo=c[4],b.repoOwner=c[3],l.removeNewCommit(a.commit.sha)}),b.commit.getFiles().then(function(a){b.files=a,e()}),e=function(){b.commit.getComments().then(function(a){b.commitComments=a.commitComments,d(a.lineComments),b.approvers=b.commit.getApprover()})},b.addLineComment=function(a){g(),a.comments=a.comments||[],f=a.comments,a.comments.push(new i({mode:"edit",position:a.position,line:a.lineNrLeft||a.lineNrRight,sha:c.sha,path:a.path,editInformations:{repo:c.repo,user:c.user},user:b.loggedInUser}))},b.addCommitComment=function(){g(),b.commitComments.push(new i({mode:"edit",position:null,line:null,sha:c.sha,path:null,editInformations:{repo:c.repo,user:c.user},user:b.loggedInUser}))},b.removeComment=function(a,b){b.remove().then(e),a&&h.remove(a.comments,function(a){return a.id===b.id})},b.cancelCreateComment=function(){g()},b.approveCommit=function(){b.commit.approve(b.loggedInUser).then(e)},b.unapproveCommit=function(){b.commit.unapprove(b.loggedInUser).then(e)},g=function(){h.remove(f,function(a){return"edit"===a.mode||h.isUndefined(a.body_html)}),h.remove(b.commitComments,function(a){return"edit"===a.mode||h.isUndefined(a.body_html)})},d=function(a){a.forEach(function(a){var c=a.path,d=h.findWhere(b.files,{name:c});if(d){var e=d.lines.lines[a.position];e.comments||(e.comments=[]),d.commentCount||(d.commentCount=0),e.comments.push(a),d.commentCount++}})}}])}(angular),function(a){"use strict";a.module("GHReview").config(["$stateProvider",function(a){a.state("commitBySha",{url:"/{user}/{repo}/commit/{sha}",templateUrl:"app/commit/commit.html",controller:"CommitController"})}])}(angular),function(a){"use strict";a.module("GHReview").directive("avatar",function(){return{restrict:"E",templateUrl:"app/directives/avatar/avatar.html",link:function(a,b,c){a.imgLink="assets/images/5b3f4c86.icon-social-github-128.png",a.link="#",a.$watch(c.commit,function(b){b&&(a.name=b.commit.committer.name),b.committer&&(a.imgLink=b.committer.avatar_url,a.link=b.committer.html_url)})}}})}(angular),function(a){"use strict";a.module("GHReview").directive("comment",[function(){return{restrict:"A",templateUrl:"app/directives/comment/comment.html",scope:{comment:"=content",cancel:"&","delete":"&"}}}])}(angular),function(a){"use strict";var b=100;a.module("GHReview").directive("commitHeader",[function(){return{restrict:"E",templateUrl:"app/directives/commit-header/commit-header-collabsible.html",link:function(a,c,d){a.commitHeaderStatus={open:!1,shouldCollapse:!1},a.$watch(d.commit,function(c){if(c){var d=c.message,e=d.split("\n"),f=e[0];a.commitHeaderStatus.shouldCollapse=e.length>1||f.length>=b}})}}}])}(angular),function(a){"use strict";a.module("GHReview").controller("commitListDirectiveController",["$scope","$location","$state","commentCollector","moment","_","hotkeys",function(a,b,c,d,e,f,g){function h(){if(j.length>0){var c=j[k].sha;a.selectedCommit=c,b.hash(c)}}var i,j=[],k=-1;d.getCommitApproved().then(function(a){i=a}),g.bindTo(a).add({combo:"down",description:"Navigate through commits",callback:function(a){a.preventDefault(),k<j.length-1&&(k++,h())}}).add({combo:"up",description:"Navigate through commits",callback:function(a){a.preventDefault(),k>0&&(k--,h())}}).add({combo:"enter",description:"Navigate through commits",callback:function(b){if(b.preventDefault(),k>-1){var d=j[k].sha;a.loader=d,c.go("commitBySha",{sha:d,user:a.filter.getOwner(),repo:a.filter.getRepo()})}}}).add({combo:"right",description:"Next page",callback:function(b){b.preventDefault(),a.filter.hasNextPage&&a.getNextPage()}}).add({combo:"left",description:"Previous page",callback:function(b){b.preventDefault(),a.filter.hasPreviousPage&&a.getPreviousPage()}});var l=function(){var c=f.groupBy(a.commits,function(a){return e(a.commit.committer.date).format("YYYY-MM-DD")}),d=f.sortBy(c,function(a,b){return e(a).isBefore(b)});j=f.flatten(d);var g=b.hash();""!==g&&(k=f.findIndex(j,{sha:g}),a.selectedCommit=g,b.hash(g)),a.sortedCommits=d};a.commitApproved=function(a){return i&&!0===i[a]},a.$watch("commits",function(){l()})}])}(angular),function(a){"use strict";a.module("GHReview").directive("ghreviewCommitList",[function(){return{restrict:"E",templateUrl:"app/directives/commit-list/commit-list.html",scope:{commits:"=commitList",filter:"="},controller:"commitListDirectiveController",link:function(){}}}])}(angular),function(a){"use strict";var b=100;a.module("GHReview").directive("commitMessageTeaser",function(){return{restrict:"E",link:function(a,c,d){a.$watch(d.message,function(a){var d=a.split("\n"),e=d[0];e.length>=b&&(e=e.substr(0,b),e+="..."),c.text(e)})}}})}(angular),function(a){"use strict";a.module("GHReview").directive("fileChange",["$parse",function(a){return{restrict:"A",link:function(b,c,d){var e=a(d.fileChange),f=function(a){b.$apply(function(){e(b,{$event:a,files:a.target.files})})};c[0].addEventListener("change",f,!1)}}}])}(angular),function(a){"use strict";a.module("GHReview").directive("formattedDate",["humanReadableDate",function(a){return{restrict:"AE",templateUrl:"app/directives/formatted-date/formatted-date.html",link:function(b,c,d){b.$watch(d.date,function(c){d.format&&""!==d.format?(b.formattedDate=a.format(c),b.date=a.customFormat(c,d.format)):(b.formattedDate=a.format(c),b.date=a.fromNow(c))})}}}])}(angular),function(a){"use strict";a.module("GHReview").controller("FileController",["$scope","$q","$log","$stateParams","_","moment","fileContent","ghCommits","Chunk","commentProvider","userPref",function(a,b,c,d,e,f,g,h,i,j,k){function l(b){j.getCommentsForCommitWithoutApprovers(b).then(function(b){b&&b.lineComments.length>0&&b.lineComments.forEach(function(b){a.comments[b.line+"-"+b.commit_id]||(a.comments[b.line+"-"+b.commit_id]=[]),a.comments[b.line+"-"+b.commit_id].push(b)})},function(a){c.log(a)})}var m=d.path,n=m.split("."),o=e.last(n),p={},q=g.split(/\r?\n/),r=[],s=0,t=[],u={},v=k.getFileView(),w=0;a.comments={},a.showComments=!1,a.languages=[{display:"Unknown",value:"unknown",hljs:""},{display:"CSS",value:"css",hljs:"css"},{display:"Less",value:"less",hljs:"less"},{display:"JavaScript",value:"js",hljs:"javascript"},{display:"JSON",value:"json",hljs:"json"},{display:"Java",value:"java",hljs:"java"},{display:"XML",value:"xml",hljs:"xml"},{display:"HTML",value:"htm",hljs:"html"},{display:"HTML",value:"html",hljs:"html"},{display:"Bash/Shell",value:"sh",hljs:"bash"}];var x=e.findIndex(a.languages,{value:o});a.suggestedLanguage=x>-1?a.languages[x]:a.languages[0],a.themes=[{display:"Github",value:"github"},{display:"Solarized Dark",value:"solarized-dark"},{display:"Solarized Light",value:"solarized-light"},{display:"Monokai",value:"monokai"}],v&&v.highlightTheme&&(w=e.findIndex(a.themes,{value:v.highlightTheme})),a.highlightTheme=a.themes[w],a.$watch("highlightTheme",function(){k.setFileView("highlightTheme",a.highlightTheme.value)}),e.each(q,function(a,b){var c={lineIndex:b,content:a};r.push(c)}),a.splicedFileContent=r,a.showUncompleteDiffWarning=!1,a.highlightSameSha=function(b){e.each(r,function(a){a.highlight="",b===a.sha&&(a.highlight="highlight")}),a.splicedFileContent=r};var y,z=[],A=[],B=function(){var a="hsl("+360*Math.random()+",100%,60%)";return e.indexOf(t,a)>-1?B():a},C=function(a){A.length<a&&A.push(null)},D=function(c){var f=b.defer(),g=new i;s=c.length;var j=function(b){h.bySha({sha:b.pop().sha,user:d.user,repo:d.repo}).then(function(c){var h=-1,i=null,k=0;if(e.each(c.files,function(a,b){d.path===a.filename&&(i=a,k=b)}),i&&e.has(i,"patch")){z.unshift(c.sha);var m=i.patch.split(/\r?\n/),n=0;e.each(m,function(a){g.isMatchingChunkHeading(a)?h=g.extractChunk(a).rightNr:g.isDeletion(a)?A.splice(h-1,1):g.isAddition(a)?(c.fileIndex=k,A.splice(h-1,0,{commit:c,lineInPatch:n}),h++):g.isSame(a)&&h++,n++,C(h)})}else a.showUncompleteDiffWarning=!0;if(b.length>0){var o=Math.floor(z.length/s*100);f.notify({progress:o,alreadyFetched:z.length}),j(b)}else A.forEach(function(a,b){if(r[b]){var c="",f="";if(null!==a&&void 0!==a){r[b].sha=a.commit.sha,e.isUndefined(p[a.commit.sha])&&(p[a.commit.sha]=B()),r[b].color=p[a.commit.sha];var g={user:d.user,repo:d.repo,sha:a.commit.sha};e.isUndefined(u[a.commit.sha])&&(u[a.commit.sha]=!0,l(g)),c=e.escape(a.commit.sha.substr(0,8)),f="commited at "+a.commit.commit.author.date+" by "+a.commit.commit.author.name+"("+a.commit.commit.author.email+")",r[b].commentable=!0,r[b].fileindex=a.commit.fileIndex,r[b].lineInPatch=a.lineInPatch,r[b].propertiesNeededForCommitView=g}r[b].path=y,r[b].linkString=c,r[b].linkTitle=f}}),f.resolve()})};return j(c),f.promise},E={user:d.user,repo:d.repo,path:d.path,sha:d.sha};h.byPath(E).then(D).then(function(){a.splicedFileContent=r,a.statusMessage="",a.progress="100"},function(){a.statusMessage="Error"},function(b){a.statusMessage="Fetching "+b.alreadyFetched+" of "+s+" commits.",a.progress=b.progress})}])}(angular),function(a){"use strict";a.module("GHReview").config(["$stateProvider",function(a){a.state("file",{url:"/{user}/{repo}/blob/{sha}/{path:.*}",templateUrl:"app/file/file.html",controller:"FileController",resolve:{fileContent:["$stateParams","ghFile",function(a,b){return b.getContent(a)}]}})}])}(angular),function(a){"use strict";a.module("GHReview").controller("FilterListController",["$scope","$state","$log","_","filter","events","userPref","importExport","Modal",function(a,b,c,d,e,f,g,h,i){0===e.getAll().length&&b.go("addFilter"),a.groupingOptions=[{value:"repo",label:"Repository"},{value:"state",label:"Review State"},{value:"owner",label:"Owner"}];var j=g.getFilterList(),k=0;j&&j.grouping&&(k=d.findIndex(a.groupingOptions,{value:j.grouping})),a.selectedGrouping=a.groupingOptions[k];var l=function(){var b=d.groupBy(e.getAll(),function(b){var d;switch(a.selectedGrouping.value){case"repo":d=b.getRepo();break;case"state":d=b.getState();break;case"owner":d=b.getOwner();break;default:c.error("Value for filter group unknown: "+a.selectedGrouping.value),d=b.getRepo()}return d}),f=d.sortBy(b,"length");return f.reverse()},m=function(){g.setFilterList("grouping",a.selectedGrouping.value),a.filterList=l(),a.filterEvents=f.getAll()};a.standup=function(a,c){void 0!==c&&(c.preventDefault(),c.stopImmediatePropagation()),b.go("standup",{filterId:a})},a.removeFilter=function(a,b){void 0!==b&&b.preventDefault(),e.remove(a),m()},a.exportName="gh-review-filter.json",a.exportFilter=function(){var b=d.map(e.getAll(),function(a){return JSON.parse(JSON.stringify(a.options))});h.exportFilter(a.exportName,b)},a.importFilter=function(a,b){var c=i.selectFilterToImport(function(a){a.forEach(function(a){a.save()}),m()});h.importFilter(b[0]).then(function(a){var b=d.map(a,e.getNewFromSettings,e);c(b)})},a.getErrorDescription=function(a){var b=a.healthCheckError,c="";if(b&&b.message){var d=JSON.parse(b.message);d.message.indexOf("Branch not found")>-1&&(c='Could not find branch: "'+a.getBranch()+'". Maybe deleted or renamed.')}return c},a.getErrorTitle=function(a){var b=a.healthCheckError,c="";if(b&&b.message){var d=JSON.parse(b.message);c=d.message}return c},a.$watch("selectedGrouping",m),m()}])}(angular),function(a){"use strict";a.module("GHReview").config(["$stateProvider",function(a){a.state("listFilter",{url:"/filter",templateUrl:"app/filter-list/filter-list.html",controller:"FilterListController"})}])}(angular),function(a){"use strict";a.module("GHReview").controller("FilterController",["$scope","$state","$stateParams","$timeout","filter","repoList","_","importExport","Modal","limitToFilter",function(a,b,c,d,e,f,g,h,i,j){function k(b){a.branchList=g.pluck(b,"name");var c=a.branchList.indexOf(a.filter.getBranch());-1===c&&(c=a.branchList.indexOf(a.selectedRepo.default_branch)),a.selectedBranch=a.branchList[c]}function l(a){console.log(a)}function m(b){a.contributorList=b,a.selectedContributor=[],a.filter.getAuthors().forEach(function(b){var c=g.findIndex(a.contributorList,{login:b});a.selectedContributor.push(a.contributorList[c])})}function n(a){console.log(a)}function o(b){a.commits=b,a.commitsLength=a.filter.getTotalCommitsLength(),a.currentPage=a.filter.getCurrentPage()}function p(a){console.log(a)}function q(){a.filterSinceAmount=a.filter.getSince().amount,a.filterSincePattern=a.availableFilterSincePattern[a.availableFilterSincePattern.indexOf(a.filter.getSince().pattern)],a.filterPath=a.filter.getPath(),a.filter.isNew()?(a.selectedRepo=null,a.selectedBranch=null,a.selectedContributor=null,a.contributorList=[],a.excludeOwnCommits=!1):(a.selectedRepo=a.repoList[g.findIndex(a.repoList,{name:a.filter.getRepo()})],a.filterReviewState=a.availableFilterReviewStates[a.availableFilterReviewStates.indexOf(a.filter.getState())]||null,a.excludeOwnCommits=a.filter.getExcludeOwnCommits(),a.filter.getBranchList().then(k,l),a.filter.getContributorList().then(m,n),a.filter.getCommits(!1).then(o,p,o))}var r=null;a.filter=e.getById(c.filterId),a.scope=a,a.repoList=f,a.branchList=[],a.commits=[],a.currentPage=1,a.availableFilterSincePattern=["days","weeks","years"],a.availableFilterReviewStates=["unseen","reviewed","approved"],a.showAdvanced=!1,a.filterIsSaved=a.filter.isSaved.bind(a.filter),a.saveFilter=a.filter.save.bind(a.filter),a.saveFilterAsNew=a.filter.saveAsNew.bind(a.filter),a.getRepoTree=function(b){return a.filter.getTree().then(function(a){var c=a.filter(function(a){var c=new RegExp(b,"gi");return c.test(a.path)});return j(c,15)})},a.pathSelected=function(b,c){a.selectedPath=c},a.reset=function(){a.filter.reset(),a.branchList=[],a.commits=[],a.currentPage=1,q()},a.importFilter=function(b,c){var d=i.selectFilterToImport(function(b){a.filter=b,q()});h.importFilter(c[0]).then(function(a){var b=g.map(a,function(a){return e.getNewFromSettings(a)});d(b)})},a.$watch("selectedRepo",function(b,c){g.isEqual(b,c)||g.isNull(b)||(a.filter.setRepo(b.name),a.filter.setOwner(b.owner.login),a.filter.setBranch(null),a.filter.unsetAuthors(),a.filter.unsetPath(),a.filter.getBranchList().then(k,l),a.filter.getContributorList().then(m,n))}),a.$watch("selectedBranch",function(b,c){g.isEqual(b,c)||g.isNull(b)||g.isUndefined(c)||(a.filter.setBranch(b),a.filter.unsetPath())}),a.$watch("selectedContributor",function(b,c){g.isEqual(b,c)||g.isNull(b)||g.isUndefined(c)||a.filter.addAuthor(g.pluck(a.selectedContributor,"login"))}),a.$watch("filterSinceAmount",function(b,c){g.isEqual(b,c)||g.isNull(b)||a.filter.setSince({amount:b,pattern:a.filterSincePattern})}),a.$watch("filterSincePattern",function(b,c){g.isEqual(b,c)||g.isNull(b)||a.filter.setSince({amount:a.filterSinceAmount,pattern:b})}),a.$watch("excludeOwnCommits",function(b,c){g.isEqual(b,c)||g.isNull(b)||a.filter.setExcludeOwnCommits(b)}),a.$watch("filterReviewState",function(b,c){g.isEqual(b,c)||a.filter.setState(b)}),a.$watch("selectedPath",function(b,c){g.isEqual(b,c)||g.isNull(b)||a.filter.setPath(b)}),a.$watch("filterPath",function(b,c){g.isEqual(b,c)||g.isNull(b)||""!==b||a.filter.setPath(b)}),a.$watch("currentPage",function(b,c){g.isEqual(b,c)||g.isNull(b)||a.filter.setCurrentPage(b)}),a.$watch(function(){return a.filter.lastEdited()},function(b,c){g.isEqual(b,c)||g.isNull(b)||(d.cancel(r),r=d(function(){a.filter.getCommits(!1).then(o,p,o)},1e3))}),q()}])}(angular),function(a){"use strict";a.module("GHReview").config(["$stateProvider",function(a){a.state("addFilter",{url:"/filter/add",templateUrl:"app/filter/filter.html",controller:"FilterController",resolve:{repoList:["repoCollector",function(a){return a.getAll()}]}}).state("commitsByFilter",{url:"/filter/{filterId}/commits",templateUrl:"app/filter/filter.html",controller:"FilterController",resolve:{repoList:["repoCollector",function(a){return a.getAll()}]}})}])}(angular),function(a){"use strict";var b=a.module("GHReview");b.factory("getCommitApproved",["commentCollector",function(a){return a.getCommitApproved()}]),b.factory("commentProviderService",["commentProvider",function(a){return a}])}(angular),function(a){"use strict";a.module("GHReview").controller("ModuleFilterController",["$scope","ghSearch",function(a,b){a.searchString="",a.doSearch=function(){b.query(a.searchString).then(function(b){a.result=b.items})}}])}(angular),function(a){"use strict";a.module("GHReview").config(["$stateProvider",function(a){a.state("modules",{url:"/filter/modules",templateUrl:"app/module/module.html",controller:"ModuleFilterController"})}])}(angular),function(a){"use strict";a.module("GHReview").controller("RootController",["$state","filter",function(a,b){a.go(b.getAll().length>0?"listFilter":"addFilter")}])}(angular),function(a){"use strict";a.module("GHReview").config(["$stateProvider",function(a){a.state("root",{url:"/",controller:"RootController"})}])}(angular),function(a){"use strict";a.module("GHReview").controller("StandupController",["$scope","$q","$stateParams","filter",function(a,b,c,d){a.fetchingCommits=!0,a.filter=d.getById(c.filterId),a.filter.getCommits(!0).then(function(b){a.commits=b,a.fetchingCommits=!1})}])}(angular),function(a){"use strict";a.module("GHReview").config(["$stateProvider",function(a){a.state("standup",{url:"/standup/{filterId}",templateUrl:"app/standup/standup.html",controller:"StandupController"})}])}(angular),function(a){"use strict";a.module("GHReview").controller("WelcomeController",[function(){}])}(angular),function(a){"use strict";a.module("GHReview").config(["$stateProvider",function(a){a.state("welcome",{url:"/welcome",templateUrl:"app/welcome/welcome.html",controller:"WelcomeController"})}])}(angular),function(a){"use strict";a.module("GHReview").controller("WhoAmIController",["$scope","ghUser",function(a,b){b.get().then(function(b){a.userData=b})}])}(angular),function(a){"use strict";a.module("GHReview").config(["$stateProvider",function(a){a.state("whoami",{url:"/whoami",templateUrl:"app/whoami/whoami.html",controller:"WhoAmIController"})}])}(angular),function(a){"use strict";a.module("GHReview").factory("authenticated",["localStorageService",function(a){return{get:function(){return null!==a.get("accessToken")},set:function(b){a.set("accessToken",b.access_token)}}}])}(angular),function(a){"use strict";a.module("GHReview").service("branchCollector",["$q","$timeout","github","_",function(a,b,c,d){function e(){this.get=d.memoize(function(a,c){var d=this;return b(function(){d.get.cache["delete"](a+"-"+c)},9e5),d.getBranchesFromGithub(c,a)},function(a,b){return a+"-"+b})}var f=a.defer;return e.prototype.getBranchesFromGithub=function(a,b){var d=[],e=f(),g=function(a){c.getNextPage(a,function(a,b){a?e.reject():(d=d.concat(b),c.hasNextPage(b)?g(b):e.resolve(d))})};return c.repos.getBranches({repo:a,user:b,per_page:100},function(a,b){a?e.reject():(d=b,c.hasNextPage(b)?g(b):e.resolve(b))}),e.promise},new e}])}(angular),function(a){"use strict";var b=a.module("GHReview");b.factory("Chunk",["_",function(a){function b(b,c){this.leftNr=0,this.rightNr=0,this.lines=[],this.addLine=function(a,b){var d=null;d=this.isMatchingChunkHeading(a)?this.addChunkLine(a):a.startsWith("-")?this.addDeletedLine(a):a.startsWith("+")?this.addAddedLine(a):this.addNormalLine(a),d.position=b,d.path=c,this.lines.push(d)},a.each(b,this.addLine,this)}"function"!=typeof String.prototype.startsWith&&(String.prototype.startsWith=function(a){return this.slice(0,a.length)===a});var c=new RegExp("^@@.*?[-+](\\d+)(,\\d+){0,1}\\s[-+](\\d+)(,\\d+){0,1} @@","g");return b.prototype.extractChunk=function(a){return c.exec(a),{leftNr:parseInt(RegExp.$1,10),rightNr:parseInt(RegExp.$3,10)}},b.prototype.addChunkLine=function(a){var b=this.extractChunk(a);return this.leftNr=b.leftNr,this.rightNr=b.rightNr,{lineNrLeft:"...",lineNrRight:"...",format:"chunk-header",text:a}},b.prototype.addDeletedLine=function(a){return{lineNrLeft:this.leftNr++,lineNrRight:"",format:"deleted",text:a}},b.prototype.addAddedLine=function(a){return{lineNrLeft:"",lineNrRight:this.rightNr++,format:"added",text:a}},b.prototype.addNormalLine=function(a){return{lineNrLeft:this.leftNr++,lineNrRight:this.rightNr++,format:"",text:a}},b.prototype.isMatchingChunkHeading=function(a){return a.match(c)},b.prototype.isAddition=function(a){return a.startsWith("+")},b.prototype.isDeletion=function(a){return a.startsWith("-")},b.prototype.isSame=function(a){return a.startsWith(" ")},b}])}(angular),function(a){"use strict";a.module("GHReview").factory("collectComments",["commentCollector","localStorageService","filter",function(a,b,c){return function(){var d=b.get("accessToken");return a.init(d),a.announceRepositories(c.getAll()),!0}}])}(angular),function(a){"use strict";var b=null;a.module("GHReview").provider("commentCollector",function(){this.$get=["$q","_",function(a,c){var d=void 0,e=void 0,f=void 0,g=void 0,h=[],i=function(a){d=new Worker("worker/collector.js"),d.onmessage=function(a){"commentsCollected"===a.data.type&&(e=a.data.commentsForRepo,f=a.data.commitApproved,g=a.data.approveComments,c.isFunction(b)&&b())};var h={type:"accessToken",accessToken:a};d.postMessage(h)},j=function(a,b){f[a]=!0,g[b]=!0},k=function(a){f[a]=!1},l=function(){var d=a.defer();return c.isUndefined(f)?b=function(){d.resolve(f)}:d.resolve(f),d.promise},m=function(){return g},n=function(a){var b=[];c.each(a,function(a){var c=a.getCommentsUrl();h.push(c),b.push(c)}),d.postMessage({type:"repositories",repositories:b}),d.postMessage({type:"start"})},o=function(a){var b=a.getCommentsUrl();h.push(b),d.postMessage({type:"repository",repository:b}),d.postMessage({type:"start"})},p=function(c){var e=a.defer();b=function(){e.resolve(),b=null};var f=c.getCommentsUrl();return h.push(f),d.postMessage({type:"repository",repository:f}),d.postMessage({type:"start"}),e.promise};return{init:i,announceRepositories:n,announceRepositoriy:o,announceRepositoryAndWaitForFinish:p,getCommitApproved:l,getApproveComments:m,addApprovalComment:j,removeApprovalComment:k}}]})}(angular),function(a){"use strict";a.module("GHReview").service("commentProvider",["$q","_","ghComments","commentCollector","Comment",function(a,b,c,d,e){var f=function(b){var c=a.defer();return d.getCommitApproved().then(function(a){var e=d.getApproveComments(),f=[];b.forEach(function(b){!0===a[b.commit_id]&&!0===e[b.id]&&f.push(b.user.login)}),c.resolve(f)}),c.promise},g=function(a,c,d){var f=b.filter(a,function(a){return!b.isNull(a.line)||!b.isNull(a.position)}),g=b.where(a,{line:null,position:null});return f=b.map(f,function(a){return a.editInformations={user:c,repo:d},new e(a)}),g=b.map(g,function(a){return a.editInformations={user:c,repo:d},new e(a)}),{lineComments:f,commitComments:g}};this.getCommentsForCommit=function(b){var d=a.defer();return c.getForCommit(b).then(function(a){f(a).then(function(c){var e={comments:g(a,b.user,b.repo),approvers:c};d.resolve(e)},d.reject)},d.reject),d.promise},this.getCommentsForCommitWithoutApprovers=function(b){var d=a.defer();return c.getForCommit(b).then(function(a){if(a.length){var c=g(a,b.user,b.repo);d.resolve(c)}else d.resolve(!1)},d.reject),d.promise}}])}(angular),function(a){"use strict";a.module("GHReview").factory("Comment",["$q","$rootScope","$log","ghComments","_",function(a,b,c,d,e){function f(a){a.mode||(a.mode="show"),e.extend(this,a)}return f.prototype.preview=function(){var a=this;d.renderAsMarkdown(this.edit_text).then(function(b){a.preview_html=b.data,a.mode="preview"})},f.prototype.createComment=function(){var a=this,b=this.editInformations.user,c=this.editInformations.repo,f=this.sha,g=function(b){b.mode="show",e.extend(a,b)};e.isNull(this.line)&&e.isNull(this.position)?d.addCommitComment(f,b,c,this.edit_text).then(g):d.addLineComment(f,b,c,this.line,this.position,this.path,this.edit_text).then(g)},f.prototype.remove=function(){return d.deleteComment(this.editInformations.user,this.editInformations.repo,this.id)},f.prototype.edit=function(){this.mode="edit",this.edit_text=this.body_text},f.prototype.continueEditing=function(){this.mode="edit"},f.prototype.cancelEdit=function(){this.mode="show",this.edit_text=""},f.prototype.save=function(){var a=this,b=this.editInformations.user,c=this.editInformations.repo;d.updateComment(b,c,this.id,this.edit_text).then(function(b){b.mode="show",e.extend(a,b)})},f.prototype.shouldShowEditButton=function(){return"show"===this.mode},f.prototype.isApproval=function(){return this.body&&this.body.indexOf("approved with [gh-review](http://gh-review.herokuapp.com/)")>-1},f.prototype.isNotApproval=function(){return!this.isApproval()},f.prototype.getApprover=function(){if(this.isNotApproval())return null;var a=this.body.indexOf("```json");if(a>-1){var b=this.body.lastIndexOf("```");if(b>-1){var c=this.body.substring(7,b),d=JSON.parse(c);return d.approver}}},f}])}(angular),function(a){"use strict";a.module("GHReview").factory("Commit",["$injector",function(a){function b(a,b,c){var d=g.filter(a,function(a){return!g.isNull(a.line)||!g.isNull(a.position)}),e=g.where(a,{line:null,position:null});return d=g.map(d,function(a){return a.editInformations={user:b,repo:c},new j(a)}),e=g.map(e,function(a){return a.editInformations={user:b,repo:c},new j(a)}),{lineComments:d,commitComments:e}}function c(a){return g.values(a).join("-")}function d(a){this.options=a,this.getCommit=g.memoize(function(a){var b=this,d=c(a);return f(function(){b.getCommit.cache["delete"](d)},6e5),h.bySha(a)},c)}var e=a.get("$q"),f=a.get("$timeout"),g=a.get("_"),h=a.get("ghCommits"),i=a.get("ghComments"),j=a.get("Comment"),k=a.get("options"),l=a.get("Chunk");return d.prototype.getFiles=function(){var a=e.defer();return this.getCommit(this.options).then(function(b){var c=g.map(b.files,function(a){var b=a.patch?a.patch.split(/\r?\n/):null,c=a.blob_url.indexOf("blob/")+"blob/".length,d=a.blob_url.substr(c),e=d.indexOf("/"),f=d.substr(0,e);return{lines:b?new l(b,a.filename):null,name:a.filename,blobSha:f,additions:a.additions,deletions:a.deletions,changes:a.changes,status:a.status}});a.resolve(c)}),a.promise},d.prototype.approve=function(a){var b=e.defer(),c=this,d=JSON.stringify({version:k.ghReview.version,approved:!0,approver:a.login,approvalDate:Date.now()},null,2),f="```json\n"+d+"\n```\napproved with [gh-review](http://gh-review.herokuapp.com/)";return i.addCommitComment(c.options.sha,c.options.user,c.options.repo,f).then(b.resolve),b.promise},d.prototype.unapprove=function(a){var b=g.find(this.comments.commitComments,function(b){return b.getApprover().indexOf(a.login)>-1},this);return b.remove()},d.prototype.getComments=function(){var a=e.defer(),c=this;return i.getForCommit(this.options).then(function(d){c.comments=b(d,c.options.user,c.options.repo),a.resolve(c.comments)}),a.promise},d.prototype.getApprover=function(){return this.comments?g.map(this.comments.commitComments,function(a){return a.getApprover()}):[]},d.prototype.isApprovedByUser=function(a){return a?this.getApprover().indexOf(a.login)>-1:!1},d}])}(angular),function(a){"use strict";a.module("GHReview").service("commitCollector",["$q","$timeout","github","_",function(a,b,c,d){function e(a){return d.values(a).join("-")}function f(){this.get=d.memoize(function(a){var c=this,d=e(a);return b(function(){c.get.cache["delete"](d)},6e5),c.getCommitsFromGithub(a)},e)}var g=a.defer;return f.prototype.getCommitsFromGithub=function(a){var b=[],d=g(),e=function(a){c.getNextPage(a,function(a,f){a?d.reject():(b=b.concat(f),c.hasNextPage(f)?(d.notify(b),e(f)):d.resolve(b))})};return a.per_page=100,c.repos.getCommits(a,function(a,f){a?d.reject():c.hasNextPage(f)?(b=f,e(f)):d.resolve(f)}),d.promise},new f}])}(angular),function(a){"use strict";a.module("GHReview").service("contributorCollector",["$q","$timeout","github","_",function(a,b,c,d){function e(){this.get=d.memoize(function(a,c){var d=this;return b(function(){d.get.cache["delete"](a+"-"+c)},72e5),d.getContributorFromGithub(c,a)},function(a,b){return a+"-"+b})}var f=a.defer;return e.prototype.getContributorFromGithub=function(a,b){var d=[],e=f(),g=function(a){c.getNextPage(a,function(a,b){a?e.reject():(d=d.concat(b),c.hasNextPage(b)?g(b):e.resolve(d))})};return c.repos.getContributors({repo:a,user:b,per_page:100},function(a,b){a?e.reject():c.hasNextPage(b)?(d=b,g(b)):e.resolve(b)}),e.promise},new e}])}(angular),function(a){"use strict";a.module("GHReview").service("eventCollector",["$q","$timeout","github","_",function(a,b,c,d){function e(a){return d.values(a).join("-")}function f(){this.pollInterval=6e4,this.etags={},this.get=d.memoize(function(a){var c=this,d=e(a);return b(function(){c.get.cache["delete"](d)},c.pollInterval),c.getEvents(a)},e)}return f.prototype.getEvents=function(b){var e=this,f=a.defer(),g=d.values(b).join("-"),h=this.etags[g];return h&&(b.headers={"If-None-Match":h}),c.events.getFromRepo(b,function(a,b){a?f.reject():(b.meta&&b.meta.etag&&(e.etags[g]=b.meta.etag),b.meta&&b.meta["x-poll-interval"]&&(e.pollInterval=1e3*parseInt(b.meta["x-poll-interval"],10)),f.resolve(b))}),f.promise},new f}])}(angular),function(a){"use strict";function b(a,b,c,f,g){var h,i="refs/heads/"+a.getBranch();if(g){var j=d.filter(b,function(a){return e(g).isBefore(a.created_at)?a:void 0});h=d.filter(j,{type:"PushEvent"})}else h=d.filter(b,{type:"PushEvent"});var k=d.filter(h,function(a){var b=a.actor.login;return b!==f&&(c.length>0&&d.contains(c,b)||0===c.length)?a:void 0}),l=d.filter(k,{payload:{ref:i}}),m=d.pluck(l,"payload"),n=d.pluck(m,"commits"),o=d.flatten(n);return d.pluck(o,"sha")}function c(a,b,c,f,g,h,i){d=b,e=c,this.$q=a,this.github=f,this.filter=g,this.localStorageService=h,this.maxPollInterval=60,this.eventsByUrl={},this.fetchedUrls=[],this.githubUserData=i,this.init()}var d=null,e=null,f=function(a){var b=this,c=this.$q.defer(),e=a.getOwner()+"/"+a.getRepo(),f=function(){var f={user:a.getOwner(),repo:a.getRepo()};b.urlEtags[e]&&(f.headers={"If-None-Match":b.urlEtags[e]}),b.github.events.getFromRepo(f,function(a,f){a||(f.meta&&(d.isUndefined(f.meta["x-poll-interval"])||(b.maxPollInterval=Math.max(b.maxPollInterval,parseInt(f.meta["x-poll-interval"],10))),d.isUndefined(f.meta.etag)||(b.urlEtags[e]=f.meta.etag)),delete f.meta,f.length&&(b.eventsByUrl[e]=f)),c.resolve()})};return d.contains(this.fetchedUrls,e)?c.resolve():(this.fetchedUrls.push(e),f()),c.promise},g=function(){var a=this.$q.defer(),c=[];return d.each(this.filter.getAll(),function(a){var d=this.$q.defer(),f=a.getOwner()+"/"+a.getRepo(),g=a.getAuthors(),h=this.eventsByUrl[f];
if(c.push(d.promise),h){var i=!1;this.allEvents[a.getId()]||(this.allEvents[a.getId()]={}),this.allEvents[a.getId()].lastUpdated&&(i=this.allEvents[a.getId()].lastUpdated),this.allEvents[a.getId()].commits=b(a,h,g,this.userData.login,i),this.allEvents[a.getId()].lastUpdated=e().format()}d.resolve()},this),this.$q.all(c).then(a.resolve),a.promise};c.prototype.init=function(){this.allEvents=this.localStorageService.get("events")||{},this.urlEtags=this.localStorageService.get("eventsUrlEtags")||{},this.githubUserData.get().then(function(a){this.userData=a}.bind(this)),this.fetch()},c.prototype.getAll=function(){return this.allEvents},c.prototype.getForFilter=function(a){return this.allEvents[a.getId()]},c.prototype.getCommitComments=function(a){return this.allEvents[a.getId()].commitComments},c.prototype.getCommits=function(a){return this.allEvents[a.getId()].commits},c.prototype.removeNewCommit=function(a){d.each(this.allEvents,function(b){d.remove(b.commits,function(b){return b===a})}),this.localStorageService.set("events",this.allEvents)},c.prototype.fetch=function(){var a=this,b=this.filter.getAll(),c=d.map(b,f,this);this.$q.all(c).then(g.bind(this)).then(function(){a.localStorageService.set("events",a.allEvents),a.localStorageService.set("eventsUrlEtags",a.urlEtags),a.fetchedUrls=[],d.delay(a.fetch.bind(a),1e3*a.maxPollInterval)})};var h=a.module("GHReview");h.service("events",["$q","_","moment","github","filter","localStorageService","ghUser",c])}(angular),function(a){"use strict";var b=a.module("GHReview");b.factory("Filter",["$q","$location","$log","filterUtils","$injector",function(b,c,d,e,f){function g(a){this.options=e.getOptions(a),this.maxResults=20,this.commitList=[],this.currentPage=1,this.isFetchingCommits=!1,this.healthCheckError=null,this.healthCheck()}var h=f.get("ghUser"),i=f.get("commentCollector"),j=f.get("branchCollector"),k=f.get("contributorCollector"),l=f.get("commitCollector"),m=f.get("treeCollector");return g.prototype.healthCheck=function(){var a=this;e.filterHealthCheck(this.options).then(function(){a.healthCheckError=null},function(b){a.healthCheckError=b})},g.prototype.isHealthy=function(){return null===this.healthCheckError},g.prototype.save=function(){this.options.meta.isClone&&(this.options.meta.id=this.options.meta.originalId,delete this.options.meta.originalId,delete this.options.meta.isClone),a.isDefined(this.options.meta.isNew)&&delete this.options.meta.isNew,this.options.meta.isSaved=!0,e.storeFilterToLocalStorage(this.getId(),this.options)},g.prototype.saveAsNew=function(){this.options.meta.id=e.generateUUID(),this.save()},g.prototype.set=function(b,c){if(!a.isDefined(this.options[b]))throw new Error("Unknown filter property");a.equals(this.options[b],c)||(this.options[b]=c,this.options.meta.lastEdited=(new Date).getTime(),this.options.meta.isSaved=!1)},g.prototype.setCustomFilter=function(b,c){a.equals(this.options.meta.customFilter[b],c)||(this.options.meta.customFilter[b]=c,this.options.meta.lastEdited=(new Date).getTime(),this.options.meta.isSaved=!1)},g.prototype.isNew=function(){return a.isDefined(this.options.meta.isNew)},g.prototype.lastEdited=function(){return this.options.meta.lastEdited},g.prototype.getId=function(){return this.options.meta.id},g.prototype.setOwner=function(a){this.set("user",a)},g.prototype.getOwner=function(){return this.options.user},g.prototype.setRepo=function(a){this.set("repo",a)},g.prototype.getRepo=function(){return this.options.repo},g.prototype.hasAuthor=function(a){return this.options.authors.indexOf(a)>-1},g.prototype.addAuthor=function(b){var c=this.options.authors.concat([]);a.isArray(b)?c=b:c.push(b),this.set("authors",c)},g.prototype.removeAuthor=function(a){var b=this.options.authors.concat([]);b.splice(b.indexOf(a),1),this.set("authors",b)},g.prototype.unsetAuthors=function(){this.set("authors",[])},g.prototype.getAuthors=function(){return this.options.authors},g.prototype.setBranch=function(a){this.set("sha",a),this.healthCheck()},g.prototype.getBranch=function(){return this.options.sha},g.prototype.setSince=function(b){if(!a.isObject(b))throw new Error("Since should be an object but was "+typeof b);this.set("since",b)},g.prototype.getSince=function(){return this.options.since},g.prototype.getSinceDate=function(){return e.getSinceDate(this.options)},g.prototype.getSinceDateISO=function(){return e.getSinceDateISO(this.options)},g.prototype.unsetSince=function(){this.set("since",{})},g.prototype.setUntil=function(a){this.set("until",a)},g.prototype.unsetUntil=function(){this.set("until",{})},g.prototype.setPath=function(a){this.set("path",a)},g.prototype.unsetPath=function(){this.set("path",null)},g.prototype.getPath=function(){return this.options.path},g.prototype.setState=function(a){this.setCustomFilter("state",a)},g.prototype.getState=function(){return this.options.meta.customFilter.state},g.prototype.setExcludeOwnCommits=function(a){this.setCustomFilter("excludeOwnCommits",a)},g.prototype.getExcludeOwnCommits=function(){return this.options.meta.customFilter.excludeOwnCommits},g.prototype.isSaved=function(){return this.options.meta.isSaved},g.prototype.reset=function(){this.tree=[],this.options=e.getOptions(this.getId()),this.healthCheck()},g.prototype._needsPostFiltering=function(){return Object.keys(this.options.meta.customFilter).length>0||this.getAuthors().length>1},g.prototype.handleError=function(a){d.error(a)},g.prototype.getContributorList=function(){var a=b.defer();return k.get(this.getOwner(),this.getRepo()).then(a.resolve,this.handleError),a.promise},g.prototype.getBranchList=function(){var a=b.defer();return j.get(this.getOwner(),this.getRepo()).then(a.resolve,this.handleError),a.promise},g.prototype.getTree=function(){var a=b.defer();return m.get(this.getOwner(),this.getRepo(),this.getBranch()).then(a.resolve,this.handleError),a.promise},g.prototype.getCurrentPage=function(){return this.currentPage},g.prototype.setCurrentPage=function(a){this.currentPage=a,c.search("page",this.currentPage)},g.prototype.getPage=function(){c.search().page&&c.search().page!==this.currentPage&&this.setCurrentPage(c.search().page);var a=this.currentPage*this.maxResults-this.maxResults,b=a+this.maxResults;return this.commitList.slice(a,b)},g.prototype.getTotalCommitsLength=function(){return this.commitList.length},g.prototype.getCommentsUrl=function(){return e.getCommentsUrl(this.options)},g.prototype.getCommits=function(a,c){this.maxResults=c||this.maxResults;var d=this,f=b.defer(),g=e.prepareGithubApiCallOptions(this.options,a);return this.isHealthy()?(this.isFetchingCommits=!0,l.get(g).then(function(a){d._processCustomFilter(a).then(function(){d.isFetchingCommits=!1,f.resolve(d.getPage())})},function(a){d.isFetchingCommits=!1,f.reject(a)},function(a){d._processCustomFilter(a).then(function(){f.notify(d.getPage())})})):f.reject(),f.promise},g.prototype._processCustomFilter=function(c){var d=b.defer(),e=this;if(this._needsPostFiltering()){var f=this.getAuthors(),g=f.length>1,j=this.getState(),k=this.getExcludeOwnCommits();h.get().then(function(b){var h=b;i.getCommitApproved().then(function(b){e.commitList=c.filter(function(c){var d=!0,e=c.author?c.author.login:c.commit.author.login;if(g&&-1===f.indexOf(e)&&(d=!1),k&&e===h.login&&(d=!1),a.isDefined(j))switch(j){case"approved":b[c.sha]||(d=!1);break;case"reviewed":!b[c.sha]&&c.commit.comment_count>0||(d=!1);break;case"unseen":0!==c.commit.comment_count&&(d=!1)}return d}),d.resolve()})})}else this.commitList=c,d.resolve();return d.promise},g}])}(angular),function(a){"use strict";a.module("GHReview").service("filterUtils",["_","moment","localStorageService","github","$log","$q",function(b,c,d,e,f,g){function h(a){return JSON.parse(JSON.stringify(a))}function i(){var b=[],c=d.get("filter");return a.isString(c)&&(b=c.split(",")),b}function j(a){return d.get("filter-"+a)}function k(a){var b=i();-1===b.indexOf(a)&&(b.push(a),d.set("filter",b.join(",")))}function l(a,b){d.set("filter-"+a,JSON.stringify(b))}var m={repo:null,user:null,sha:"master",since:{pattern:"weeks",amount:2},until:{},path:null,authors:[],contributor:null,meta:{isSaved:!1,lastEdited:null,customFilter:{excludeOwnCommits:!1},id:null}};this.generateUUID=function(){var a=(new Date).getTime();return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(b){var c=(a+16*Math.random())%16|0;return a=Math.floor(a/16),("x"===b?c:7&c|8).toString(16)})},this.getOptions=function(a){a=a||this.generateUUID();var c=h(m),d=j(a);return b.isNull(d)?(c.meta.isNew=!0,c.meta.id=a):(b.extend(c,d),c.meta.isSaved=!0),c},this.getCommentsUrl=function(a){var b="https://api.github.com/repos/";return a.user&&!/^\s*$/.test(a.user)&&(b+=a.user+"/"),b+=a.repo+"/comments",b+="?per_page=100"},this.getSinceDate=function(a){var d=null;return b.isUndefined(a.since)||2!==b.size(a.since)||(d=c().startOf("minute").subtract(a.since.amount,a.since.pattern).toISOString()),d},this.getSinceDateISO=function(a){var d=null;return b.isUndefined(a.since)||2!==b.size(a.since)||(d=c().subtract(a.since.amount,a.since.pattern).startOf("day").toISOString()),d},this.prepareGithubApiCallOptions=function(a,d){var e=h(a),f={};return b.each(e,function(a,b){"authors"===b?1===a.length&&(f.author=a[0]):"since"===b&&null!==a?f.since=this.getSinceDateISO(e):"until"===b&&null!==a||"meta"!==b&&null!==a&&(f[b]=a),d&&(f.since=c().subtract(24,"hours").toISOString())},this),f},this.storeFilterToLocalStorage=function(a,b){k(a),l(a,b)},this.filterHealthCheck=function(a){var b=g.defer(),c=a.user,d=a.repo,f=a.sha;return c&&d&&f&&e.repos.getBranch({user:c,repo:d,branch:f},function(a,c){a?b.reject(a):b.resolve(c)}),b.promise}}])}(angular),function(a){"use strict";a.module("GHReview").service("filter",["$log","_","localStorageService","Filter",function(a,b,c,d){var e={},f=function(a){return JSON.parse(JSON.stringify(a))};this.getAll=function(){var a=this,b=[],d=c.get("filter");return null!==d&&d.split(",").forEach(function(c){b.push(a.getById(c))}),b},this.getById=function(a){return e[a]||(e[a]=new d(a)),e[a]},this.getNew=function(){var a=new d;return e[a.getId()]=a,a},this.getNewFromSettings=function(a){a.meta.id&&delete a.meta.id;var b=this.getNew(),c=b.getId();return b.options=f(a),b.options.meta.id=c,b},this.getCloneOf=function(b){if(b instanceof d){var c=new d;return c.options=f(b.options),c.options.meta.originalId=b.options.meta.id,c.options.meta.id=c.options.meta.id+"_clone",c.options.meta.isClone=!0,c}a.error("No Filter")},this.remove=function(a){c.remove("filter-"+a);var d=c.get("filter").split(",");b.remove(d,function(b){return b===a}),c.set("filter",d.join(","))}}])}(angular),function(a){"use strict";a.module("GHReview").service("ghComments",["$q","github",function(a,b){this.getForCommit=function(c){var d=a.defer();return b.repos.getCommitComments({user:c.user,repo:c.repo,sha:c.sha,headers:{Accept:"application/vnd.github-commitcomment.full+json"}},function(a,b){a?d.reject(a):(b.meta&&delete b.meta,d.resolve(b))}),d.promise},this.addCommitComment=function(c,d,e,f){var g=a.defer();return b.repos.createCommitComment({user:d,repo:e,sha:c,body:f,headers:{Accept:"application/vnd.github-commitcomment.full+json"}},function(a,b){a?g.reject(a):g.resolve(b)}),g.promise},this.addLineComment=function(c,d,e,f,g,h,i){var j=a.defer();return b.repos.createCommitComment({user:d,repo:e,sha:c,line:f,position:g,path:h,body:i,headers:{Accept:"application/vnd.github-commitcomment.full+json"}},function(a,b){a?j.reject(a):j.resolve(b)}),j.promise},this.deleteComment=function(c,d,e){var f=a.defer();return b.repos.deleteCommitComment({user:c,repo:d,id:e},function(a){a?f.reject(a):f.resolve()}),f.promise},this.updateComment=function(c,d,e,f){var g=a.defer();return b.repos.updateCommitComment({user:c,repo:d,id:e,body:f,headers:{Accept:"application/vnd.github-commitcomment.full+json"}},function(a,b){a?g.reject(a):g.resolve(b)}),g.promise},this.renderAsMarkdown=function(c){var d=a.defer();return b.markdown.render({text:c,mode:"gfm"},function(a,b){a?d.reject(a):d.resolve(b)}),d.promise}}])}(angular),function(a){"use strict";a.module("GHReview").service("ghCommits",["$q","github","localStorageService",function(a,b,c){this.bySha=function(c){var d=a.defer();return b.repos.getCommit({user:c.user,repo:c.repo,sha:c.sha,headers:{Accept:"application/vnd.github-commitcomment.html+json"}},function(a,b){a?d.reject(a):(b.meta&&delete b.meta,d.resolve(b))}),d.promise},this.byPath=function(b){var d=a.defer(),e=new Worker("worker/commitsOfFile.js");return e.onmessage=function(a){"commits"===a.data.type&&(e.terminate(),d.resolve(a.data.commits.concat([])))},b.type="getCommits",b.token=c.get("accessToken"),e.postMessage(b),d.promise}}])}(angular),function(a){"use strict";a.module("GHReview").service("ghFile",["$q","github",function(a,b){this.getContent=function(c){var d=a.defer();return c.headers={accept:"application/vnd.github.v3.raw"},b.repos.getContent(c,function(a,b){a?d.reject(a):d.resolve(b.data)}),d.promise}}])}(angular),function(a){"use strict";a.module("GHReview").service("ghSearch",["$q","github",function(a,b){this.query=function(c){var d=a.defer();return b.search.code({q:c},function(a,b){a?d.reject(a):d.resolve(b)}),d.promise}}])}(angular),function(a){"use strict";a.module("GHReview").service("ghRepos",["$q","github",function(a,b){this.getAll=function(c){c=c||{};var d=a.defer();return b.repos.getAll(c,function(a,b){a?d.reject(a):d.resolve(b)}),d.promise},this.getFromOrg=function(c){var d=a.defer();return b.repos.getFromOrg(c,function(a,b){a?d.reject(a):d.resolve(b)}),d.promise}}])}(angular),function(a){"use strict";a.module("GHReview").service("ghUser",["$q","github",function(a,b){var c=null;this.get=function(){var d=a.defer();return c?d.resolve(c):b.user.get({},function(a,b){a?d.reject(a):(c=b,d.resolve(b))}),d.promise},this.getOrgs=function(c){c=c||{};var d=a.defer();return b.user.getOrgs(c,function(a,b){a?d.reject():d.resolve(b)}),d.promise}}])}(angular),function(a){"use strict";var b;a.module("GHReview").constant("GitHub",window.Github).service("github",["GitHub","localStorageService",function(a,c){var d=c.get("accessToken");if(!b&&null!==d){var e={type:"oauth",token:d};b=new a({}),b.authenticate(e)}return b}])}(angular),function(a){"use strict";a.module("GHReview").factory("humanReadableDate",["moment",function(a){return{fromNow:function(b){var c=null;return b&&(c=a(b).fromNow()),c},format:function(b){var c=null;return b&&(c=a(b).format("llll")),c},customFormat:function(b,c){var d=null;return b&&(d=a(b).format(c)),d}}}])}(angular),function(a){"use strict";a.module("GHReview").service("importExport",["$q","$log",function(a,b){function c(a,b){window.saveAs(a,b)}function d(a,b){var d=new Blob([a],{type:"application/json;charset=utf-8"});c(d,b)}function e(b){var c=a.defer(),d=new FileReader;return d.readAsText(b,"UTF-8"),d.onloadend=function(a){c.resolve(a.target.result)},c.promise}function f(c){var d=a.defer(),e=!1;try{e=JSON.parse(c)}catch(f){d.reject(f),b.error(f)}return e&&d.resolve(e),d.promise}var g=!1;try{g=!!new Blob}catch(h){}this.exportFilter=function(a,b){var c=JSON.stringify(b);d(c,a)},this.importFilter=function(a){return e(a).then(f)}}])}(angular),function(a){"use strict";a.module("GHReview").constant("_",window._)}(angular),function(a){"use strict";a.module("GHReview").controller("MenuController",["$scope","$state","authenticated","ghUser","hotkeys",function(a,b,c,d,e){a.isAuthenticated=c.get,a.isCollapsed=!0,a.menu=[{title:"Commits",link:"listFilter",id:"menu-commits"},{title:"Modules",link:"modules",id:"menu-modules"}],a.submenu=[{title:"Who Am I",linkType:"sref",link:"whoami",id:"submenu-whoami"},{title:"I found a bug",linkType:"href",link:"https://github.com/Dica-Developer/gh-review/issues",id:"submenu-bug"},{title:"I need more",linkType:"href",link:"https://github.com/Dica-Developer/gh-review",id:"submenu-more"},{title:"How to use",linkType:"href",link:"https://github.com/Dica-Developer/gh-review/wiki",id:"submenu-howto"},{title:"About",linkType:"sref",link:"about",id:"submenu-about"},{title:"Logout",linkType:"sref",link:"logout",id:"submenu-logout"}],a.isAuthenticated()&&(e.bindTo(a).add({combo:"g f",description:"Go to filter list",callback:function(a){a.preventDefault(),b.go("listFilter")}}).add({combo:"g m",description:"Go to module search",callback:function(a){a.preventDefault(),b.go("modules")}}).add({combo:"g w",description:'Go to "Who Am I" page',callback:function(a){a.preventDefault(),b.go("whoami")}}).add({combo:": q",description:"Logout",callback:function(a){a.preventDefault(),b.go("logout")}}),d.get().then(function(b){a.name=b.name}))}])}(angular),function(a){"use strict";a.module("GHReview").factory("Modal",["$rootScope","$modal","_",function(b,c,d){function e(d,e,f){var g=b.$new();return d=d||{},e=e||"modal-default",f=f||"components/modal/modal.html",a.extend(g,d),c.open({templateUrl:f,windowClass:e,scope:g})}return{selectFilterToImport:function(b){return b=b||a.noop,function(a){var c,f=[];c=e({modal:{filterList:a,filterInList:function(a){return d.findIndex(f,a)>-1},toggleFilter:function(a){var b=d.findIndex(f,a);b>-1?f.splice(b,1):f.push(a)},dismissable:!0,title:"Select filter to import",buttons:[{classes:"btn-success",text:"Import",click:function(){c.close()}},{classes:"btn-default",text:"Cancel",click:function(){c.dismiss()}}]}},"modal-default","components/modal/select-filter-to-import.html"),c.result.then(function(){b(f)})}}}}])}(angular),function(a){"use strict";a.module("GHReview").constant("moment",window.moment)}(angular),function(a){"use strict";a.module("GHReview").service("repoCollector",["$q","$timeout","ghUser","ghRepos","_",function(a,b,c,d,e){function f(){this.getAll=e.memoize(function(){var a=this;return b(function(){a.getAll.cache["delete"]("all-repos")},36e5),a.getAllReposFromGithub()},function(){return"all-repos"})}var g=a.defer;return f.prototype.getAllReposFromGithub=function(){return this.getOrganizationsForUser().then(this.getReposFromOrganizations.bind(this)).then(this.getReposFromUser.bind(this))},f.prototype.getOrganizationsForUser=function(){return c.getOrgs({per_page:100})},f.prototype.getReposFromOrganizations=function(b){var c=g(),e=[],f=[];return b.forEach(function(a){var b=g();e.push(b.promise),d.getFromOrg({org:a.login,per_page:100}).then(function(a){f=f.concat(a),b.resolve()},b.reject)}),a.all(e).then(function(){c.resolve(f)},c.reject),c.promise},f.prototype.getReposFromUser=function(a){var b=g();return d.getAll({per_page:100}).then(function(c){a=a.concat(c),b.resolve(a)},b.reject),b.promise},new f}])}(angular),function(a){"use strict";a.module("GHReview").service("treeCollector",["$q","$timeout","github","_",function(a,b,c,d){function e(){this.get=d.memoize(function(a,c,d){var e=this;return b(function(){e.get.cache["delete"](a+"-"+c+"-"+d)},18e5),e.getTreeFromGithub(a,c,d)},function(a,b,c){return a+"-"+b+"-"+c})}var f=a.defer;return e.prototype.getTreeFromGithub=function(a,b,d){var e=[],g=f(),h=function(a){c.getNextPage(a,function(a,b){a?g.reject(a):(e=e.concat(b.tree),c.hasNextPage(b)?h(b):g.resolve(e))})};return c.gitdata.getTree({user:a,repo:b,sha:d,recursive:!0},function(a,b){a?g.reject(a):c.hasNextPage(b)?(e=b.tree,h(b)):g.resolve(b.tree)}),g.promise},new e}])}(angular),function(a){"use strict";a.module("GHReview").service("userPref",["localStorageService",function(a){var b=a.get("preferences")||{};this.save=function(){a.set("preferences",b)},this.getAll=function(){return b},this.getFilterList=function(a){var c=b.filterList||null;return b.filterList&&a&&(c=b.filterList[a]),c},this.setFilterList=function(a,c){b.filterList=b.filterList||{},b.filterList[a]=c,this.save()},this.getFileView=function(a){var c=b.fileView||null;return b.fileView&&a&&(c=b.fileView[a]),c},this.setFileView=function(a,c){b.fileView=b.fileView||{},b.fileView[a]=c,this.save()}}])}(angular),angular.module("GHReview").run(["$templateCache",function(a){"use strict";a.put("app/commit/commit.html",'<div ng-include="\'components/menu/menu.html\'"></div><div id=main class=container-fluid><div class=row><div class=col-sm-12><ol class=breadcrumb><li><a ui-sref=listFilter()>filter</a></li><li>commits</li><li>{{commitResponse.sha}}</li></ol></div></div><div ng-if=commitResponse class=row><div class=col-sm-12><commit-header commit=commitResponse.commit></commit-header></div></div><div ng-if=commitResponse class=row><div class=col-sm-12><small>Showing <strong>{{files.length}} changed {{files.length === 1 ? \'file\' : \'files\'}}</strong> with <strong>{{commitResponse.stats.additions}} additions</strong> and <strong>{{commitResponse.stats.deletions}} deletions</strong></small></div></div><div ng-if=files class=row id=diff-view ng-cloak><div class=col-sm-12><div ng-repeat="file in files" class="panel panel-default"><div class=panel-heading ng-init="file.isClosed = ($index >= 5 || file.status === \'removed\' || file.changes === 0)">File: <a ui-sref="file({user: repoOwner, repo: commitRepo, sha: commitResponse.sha, path: file.name, ref: file.blobSha})">{{file.name}}</a><div class=pull-right><span class="label label-primary"><span class="glyphicon glyphicon-status"></span>{{file.status}}</span> <span class="label label-success" ng-if="file.additions > 0"><span class="glyphicon glyphicon-plus"></span> {{file.additions}}</span> <span class="label label-danger" ng-if="file.deletions > 0"><span class="glyphicon glyphicon-minus"></span> {{file.deletions}}</span> <span class="label label-info"><span class="glyphicon glyphicon-transfer"></span> {{file.changes}}</span> <span class="label label-primary" ng-if=file.commentCount><span class="glyphicon glyphicon-comment"></span> {{file.commentCount}}</span> <span class="label label-default collapse-expand-label" ng-click="file.isClosed = file.isClosed ? false : true" ng-if="file.changes > 0"><span class="glyphicon glyphicon" ng-class="{\'glyphicon-save\': file.isClosed, \'glyphicon-open\': !file.isClosed}"></span> {{file.isClosed ? \'Expand&nbsp;&nbsp;\': \'Collapse\'}}</span></div></div><div class=table-wrapper ng-if=!file.isClosed><div class=div-table><div ng-repeat="line in file.lines.lines" ng-model=line><div class=div-table-row ng-class=line.format ng-dblclick=addLineComment(line)><div class=div-table-cell></div><div class="div-table-cell lineNr">{{line.lineNrLeft}}</div><div class="div-table-cell lineNr">{{line.lineNrRight}}</div><div class=div-table-cell><pre>{{line.text}}</pre></div></div><div class=comments-wrapper ng-if="line.comments.length > 0"><div class="comments div-table-row" ng-repeat="comment in line.comments"><div class=div-table-cell></div><div class="div-table-cell lineNr"></div><div class="div-table-cell lineNr"></div><div class="lineComment panel panel-default" content=comment data-mode=comment.mode data-cancel=cancelCreateComment() data-delete="removeComment(line, comment)" comment></div></div><div class="comments div-table-row"><div class=div-table-cell></div><div class="div-table-cell lineNr"></div><div class="div-table-cell lineNr"></div><button type=button class="btn btn-info btn-sm" ng-click=addLineComment(line)>Add comment</button></div></div></div></div></div></div></div></div><div class=row ng-if="commitComments.length > 0" ng-cloak><div class=col-sm-12><table class="table-responsive table table-condensed commit-comments"><tr ng-repeat="comment in commitComments" ng-if=comment.isNotApproval()><td class=comment-holder><div class="lineComment panel panel-default" content=comment data-mode=comment.mode data-cancel=cancelCreateComment() data-delete="removeComment(line, comment)" comment></div></td></tr></table></div></div><div class=row ng-cloak><div class=col-sm-12><div class=pull-left><button type=button class="btn btn-info" ng-click=addCommitComment()>Add Comment</button></div><div class=pull-right><button ng-if=!commit.isApprovedByUser(loggedInUser) type=button class="btn btn-success" ng-click=approveCommit()>Approve Commit</button> <button ng-if=commit.isApprovedByUser(loggedInUser) type=button class="btn btn-danger" ng-click=unapproveCommit()>Unapprove Commit</button></div></div></div></div>'),a.put("app/directives/avatar/avatar.html","<a href={{link}} title={{name}} target=_blank><img height=32px class=media-object ng-src={{imgLink}}></a>"),a.put("app/directives/comment/comment.html",'<div class=panel-heading><div class=media><img ng-if=comment.user height=24px class="media-object pull-left" ng-src={{comment.user.avatar_url}} title="{{comment.user.login}}"><div class=media-body><strong ng-if=comment.user>{{comment.user.login}}</strong><div class=pull-right><span ng-if=comment.created_at class=text-muted><formatted-date date=comment.created_at></formatted-date></span><div class="btn-group btn-group-xs"><button ng-if=comment.shouldShowEditButton() type=button class="btn btn-default edit" ng-click=comment.edit()><span class="glyphicon glyphicon-pencil"></span></button> <button ng-if=comment.id type=button class="btn btn-default remove" ng-click=delete()><span class="glyphicon glyphicon-remove-circle"></span></button></div></div></div></div></div><!--existing comment--><div ng-if=comment.id class=panel-body><div ng-if="comment.mode !== \'edit\'" ng-bind-html="comment.mode === \'show\' ? comment.body_html : comment.preview_html"></div><textarea ng-if="comment.mode === \'edit\'" class=form-control ng-model=comment.edit_text></textarea><button ng-if="comment.mode !== \'show\'" type=button id=cancelComment class="btn btn-default btn-sm" ng-click=comment.cancelEdit()>Cancel</button> <button ng-if="comment.mode === \'edit\'" type=button id=previewComment class="btn btn-default btn-sm" ng-click=comment.preview()>Preview</button> <button ng-if="comment.mode === \'preview\'" type=button id=continueEditComment class="btn btn-default btn-sm" ng-click="comment.mode = \'edit\'">Edit</button> <button ng-if="comment.mode !== \'show\'" type=button id=submitLineComment class="btn btn-primary btn-sm" ng-click=comment.save()>Save</button></div><!--new comment--><div ng-if=!comment.id class=panel-body><div ng-if="comment.mode !== \'edit\'" ng-bind-html=comment.preview_html></div><textarea ng-if="comment.mode === \'edit\'" class=form-control ng-model=comment.edit_text></textarea><button ng-if="comment.mode !== \'show\'" type=button id=cancelComment class="btn btn-default btn-sm" ng-click=cancel()>Cancel</button> <button ng-if="comment.mode === \'edit\' && comment.edit_text" type=button id=previewComment class="btn btn-default btn-sm" ng-click=comment.preview()>Preview</button> <button ng-if="comment.mode === \'preview\'" type=button id=continueEditComment class="btn btn-default btn-sm" ng-click="comment.mode = \'edit\'">Edit</button> <button ng-if="comment.mode !== \'show\' && comment.edit_text" type=button id=submitLineComment class="btn btn-primary btn-sm" ng-click=comment.createComment()>Create</button></div>'),a.put("app/directives/commit-header/commit-header-collabsible.html",'<div><accordion ng-if=commitHeaderStatus.shouldCollapse><accordion-group is-open=commitHeaderStatus.open><accordion-heading><div class=media><avatar commit=commitResponse></avatar><!--TODO remove inline style--><div class=media-body style="padding-left: 5px; margin: 5px"><strong>{{commitResponse.committer.name}}</strong> <span class=text-muted>authored<formatted-date date=commit.date></formatted-date></span> {{getApprover()}} <span class=pull-right ng-if="approvers.length > 0">approved by <a ng-repeat="approver in approvers" href=https://github.com/{{approver}} class=user-mention>@{{approver}}</a></span></div></div><commit-message-teaser message=commitResponse.commit.message></commit-message-teaser><i class="pull-right glyphicon" ng-class="{\'glyphicon-chevron-down\': commitHeaderStatus.open, \'glyphicon-chevron-right\': !commitHeaderStatus.open}"></i></accordion-heading><pre ng-if=commitHeaderStatus.open>{{commitResponse.commit.message}}</pre></accordion-group></accordion><div ng-if=!commitHeaderStatus.shouldCollapse class="panel panel-default"><div class=panel-heading><div class=media><avatar commit=commitResponse></avatar><!--TODO remove inline style--><div class=media-body style="padding-left: 5px; margin: 5px"><strong>{{commitResponse.commit.committer.name}}</strong> <span class=text-muted>authored<formatted-date date=commitResponse.commit.committer.date></formatted-date></span> <span class=pull-right ng-if="approvers.length > 0">approved by <a ng-repeat="approver in approvers" href=https://github.com/{{approver}} class=user-mention>@{{approver}}</a></span></div></div><h3 class=panel-title>{{commitResponse.commit.message}}</h3></div></div></div>'),a.put("app/directives/commit-list/commit-list.html",'<div class="panel panel-default" ng-repeat="commits in sortedCommits"><div class=panel-heading formatted-date format=LL date=commits[0].commit.committer.date></div><ul id=commitList class=list-group><a ng-class="{\'selected-commit\': (selectedCommit === commit.sha)}" ng-repeat="commit in commits" ui-sref="commitBySha({sha: commit.sha, user: filter.getOwner(), repo: filter.getRepo()})" class=list-group-item ng-click="loader = commit.sha"><div id={{commit.sha}} class=scroll-anchor></div><div class=media><div class=media-left><avatar commit=commit></avatar></div><div class=media-body><div class=commit-message title={{commit.commit.message}}><strong class=breakLine>{{commit.commit.message}}</strong></div><div class=commit-meta>{{commit.commit.author.name}} <small formatted-date date=commit.commit.committer.date></small> <span class="label label-success" ng-if=commitApproved(commit.sha)>approved</span></div><div class=pull-right><span ng-show="commit.commit.comment_count > 0" class="label label-info"><ng-pluralize count=commit.commit.comment_count when="{\n                                                    \'one\': \'1 comment\',\n                                                    \'other\': \'{} comments\'}\n                                                    "></ng-pluralize></span> &nbsp; <span ng-show="filterEvents.commits.indexOf(commit.sha) > -1" class="label label-success">New</span></div></div></div><div class=commit-loader ng-if="commit.sha === loader"><div class=commit-loader-message>Loading commit {{commit.sha}}</div></div></a></ul></div><div id=commitListLoadingIndicator></div>'),a.put("app/directives/formatted-date/formatted-date.html","<span tooltip-placement=top tooltip={{formattedDate}}>{{date}}</span>"),a.put("app/file/file.html",'<div ng-include="\'components/menu/menu.html\'"></div><div id=main class=container-fluid><div class="row animate-hide" ng-hide="progress >= 100"><progressbar class=navbarProgressbar value=progress type={{progressType}}></progressbar></div><div><div class="panel panel-default"><div class=panel-heading><div class=btn-group-xs><button type=button class="btn btn-default" data-toggle=collapse data-target=#extraOptions>More</button></div></div><div class="panel-body collapse out" id=extraOptions><div class=form-group><label>Highlight theme</label><select id=highlightTheme class=form-control ng-options="theme.display for theme in themes" ng-model=highlightTheme></select></div><div class=form-group><label>Language</label><select id=suggestedLanguage class=form-control ng-options="language.display for language in languages" ng-model=suggestedLanguage></select></div><div class=checkbox><label><input type=checkbox id=showComments class=form-control ng-model=showComments>Show comments</label></div></div></div></div><div class=row><div class=col-sm-12><div class=uncomplete-diff-warning ng-if=showUncompleteDiffWarning>Diff is very big! Diff is not complete!</div><div class=table-wrapper><div class=div-table ng-class=highlightTheme.value><div ng-repeat="line in splicedFileContent" ng-model=line><div class=div-table-row ng-class=line.highlight><div class=div-table-cell popover={{line.linkTitle}} popover-trigger=mouseenter popover-placement=right popover-append-to-body=true><a ui-sref=commitBySha(line.propertiesNeededForCommitView)>{{line.linkString}}</a></div><div class="commitMarker div-table-cell" style="background-color: {{line.color}}"></div><div class="lineNr div-table-cell">{{line.lineIndex}}</div><div class=div-table-cell hljs source=line.content language={{suggestedLanguage.hljs}}></div></div><div class=comments-wrapper ng-if="comments[line.lineIndex +\'-\'+ line.sha]" ng-show=showComments><div class="comments div-table-row" ng-repeat="comment in comments[line.lineIndex +\'-\'+ line.sha]"><div class=div-table-cell></div><div class="div-table-cell lineNr"></div><div class="div-table-cell lineNr"></div><div class="lineComment panel panel-default" content=comment comment></div></div></div></div></div></div><div class=uncomplete-diff-warning ng-if=showUncompleteDiffWarning>Diff is very big! Diff is not complete!</div></div></div></div>'),a.put("app/filter-list/filter-list.html",'<div ng-include="\'components/menu/menu.html\'"></div><div id=main class=container-fluid><div class="row review-overview"><div class=col-xs-12><div class="panel panel-default"><div class=panel-heading>Grouped by: {{selectedGrouping.label}} <button type=button class="btn btn-default btn-xs pull-right" data-toggle=collapse data-target=#extraOptions>More</button></div><div class="panel-body collapse out" id=extraOptions><form class=form-inline role=form><div class=form-group><label class=input-sm>Group by:</label><select id=selectGroup class="form-control input-sm" ng-model=selectedGrouping ng-options="opt as opt.label for opt in groupingOptions"></select></div><div class=form-group><label class=input-sm>Export Filter:</label><div class=input-group><span class=input-group-btn><button class="btn btn-primary btn-sm" type=button ng-click=exportFilter()>Export</button></span> <input class="form-control input-sm" ng-model=exportName placeholder={{exportName}}></div></div><div class=form-group><label class=input-sm>Import Filter:</label><span class="btn btn-primary btn-file btn-sm">Browse&hellip;<input type=file data-file-change="importFilter($event, files)" accept=application/json></span></div></form></div></div></div><div class=col-xs-12><div class="panel panel-default" ng-repeat="groupedFilter in filterList"><div ng-if="selectedGrouping.value === \'repo\'" class=panel-heading>{{groupedFilter[0].getOwner()}}/{{groupedFilter[0].getRepo()}}</div><div ng-if="selectedGrouping.value === \'owner\'" class=panel-heading>{{groupedFilter[0].getOwner()}}</div><div ng-if="selectedGrouping.value === \'state\'" class=panel-heading>{{groupedFilter[0].getState() || \'unreviewed\'}}</div><ul id=reviewList class=list-group><a ng-repeat="filter in groupedFilter" ui-sref="commitsByFilter({filterId: filter.getId()})" class=list-group-item ng-class="{\'list-group-item-danger\': !filter.isHealthy()}"><div class=row><div class="col-sm-9 col-xs-8"><span ng-if=!filter.isHealthy() class="filter-error glyphicon glyphicon-alert hidden-xs" popover={{getErrorDescription(filter)}} popover-title={{getErrorTitle(filter)}} popover-placement=right popover-trigger=mouseenter></span> <span class=hidden-xs ng-if="selectedGrouping.value !== \'owner\'"><strong>Owner:</strong>{{groupedFilter[0].getOwner()}}</span> <span class=hidden-xs ng-if="selectedGrouping.value !== \'repo\'"><strong>Repository:</strong>{{ filter.getRepo() }}</span> <span class=hidden-xs ng-if=filter.getBranch()><strong>Branch:</strong>{{ filter.getBranch() }}</span> <span class=hidden-xs ng-if=filter.getSinceDate()><strong>Since:</strong><formatted-date date=filter.getSinceDate()></formatted-date></span> <span class=hidden-xs ng-if=filter.getAuthors().length><strong>Authors:</strong>{{ filter.getAuthors().join(\', \') }}</span> <span class="visible-xs ellipsis">{{ selectedGrouping.value === \'owner\' ? filter.getOwner() : \'\'}}/{{filter.getBranch()}}</span></div><div class="col-sm-3 col-xs-4"><div class=pull-right><span ng-if="filterEvents[filter.getId()].commits.length > 0" class="label label-info hidden-xs"><ng-pluralize count=filterEvents[filter.getId()].commits.length when="{\'one\': \'1 new commit\',\'other\': \'{} new commits\'}"></ng-pluralize></span> <span class="label label-info visible-xs-inline-block" ng-if="filterEvents[filter.getId()].commits.length > 0">{{filterEvents[filter.getId()].commits.length}}</span> <span class="standup glyphicon glyphicon-dashboard" tooltip=Standup ng-click="standup(filter.getId(), $event)"></span> <span class="destroy glyphicon glyphicon-remove-circle" tooltip=Remove ng-click="removeFilter(filter.getId(), $event)"></span></div></div></div></a></ul></div><a ui-sref=addFilter class="btn btn-default"><span class="glyphicon glyphicon-plus"></span> Add one more filter</a></div></div></div>'),a.put("app/filter/filter.html",'<div ng-include="\'components/menu/menu.html\'"></div><div id=main class=container-fluid><div class=row><div class=col-xs-12><a ui-sref=listFilter()>Back to filter list</a></div></div><div class=row><div class=col-xs-12><div class="well well-lg" ng-if=filter.isNew()>Do find commits you want to review try to select a repository and a branch. After selecting them you will have more criterias to dive in the commits.<p><label class=input-sm>Import Filter:</label><span class="btn btn-primary btn-file btn-sm">Browse&hellip;<input type=file data-file-change="importFilter($event, files)" accept=application/json></span></p></div><div class=panel ng-class="{\'panel-danger\': !filter.isHealthy(), \'panel-default\': filter.isHealthy()}"><div class=panel-heading><form class=form-inline role=form><div class=form-group><label for=selectGroup>Repository:</label><select id=selectGroup class="form-control input-sm" ng-options="repo.name group by repo.owner.login for repo in repoList track by repo.full_name" ng-model=scope.selectedRepo><option value="">--- choose repository ---</option></select></div><div class=form-group><label for=selectBranch>Branch:</label><select id=selectBranch class="form-control input-sm" ng-model=scope.selectedBranch ng-options="branch for branch in branchList"><option ng-if="!scope.selectedRepo || !branchList.length" value="">--- {{scope.selectedRepo && !branchList.length ? \'fetching branches\' : \'choose repository first\'}} filter-list---</option></select></div><div class=form-group><label for=filterSinceAmount>Since:</label><input ng-model=scope.filterSinceAmount id=filterSinceAmount class="form-control input-sm" type=number min=0 max="99"><label class=sr-only for=filterSincePattern>Since pattern</label><select id=filterSincePattern class="form-control input-sm" ng-model=scope.filterSincePattern ng-options="sincePattern for sincePattern in availableFilterSincePattern"></select></div><div class=form-group><label for=filterContributor>Contributor:</label><input disabled placeholder="" style="width: 300px" ng-if="contributorList.length === 0"><ui-select id=filterContributor multiple ng-model=scope.selectedContributor class=input-sm style="width: 300px" ng-if="contributorList.length > 0"><ui-select-match placeholder="Select contributor...">{{$item.login}}</ui-select-match><ui-select-choices repeat="contributor in contributorList | filter:$select.search"><img height=36px class="media-object pull-left" ng-src="{{contributor.avatar_url}}">&nbsp;<div ng-bind-html="contributor.login| highlight: $select.search"></div></ui-select-choices></ui-select></div><div class="form-group pull-right"><div class="btn-group btn-group-xs"><button ng-if="scope.selectedBranch && !filterIsSaved()" class="btn btn-success" ng-click=saveFilter()>Save</button> <button ng-if="scope.selectedBranch && !filterIsSaved() && !filter.isNew()" class="btn btn-success" ng-click=saveFilterAsNew()>Save as new</button> <button ng-if="scope.selectedRepo && !filterIsSaved()" class="btn btn-warning" ng-click=reset()>Reset</button> <button class="btn btn-default" ng-click="showAdvanced = !showAdvanced">{{showAdvanced ? \'Less\' : \'More\'}}</button></div></div></form><!--Advanced filter section--><div collapse=!showAdvanced><form class=form-inline role=form><div class=form-group><label for=excludeOwnCommits>Exclude own commits:</label><input type=checkbox id=excludeOwnCommits ng-model="excludeOwnCommits"></div><div class=form-group><label for=filterReviewState>Review state:</label><select id=filterReviewState class="form-control input-sm" ng-model=scope.filterReviewState ng-options="reviewState for reviewState in availableFilterReviewStates"><option value="">--- select review state ---</option></select></div><div class=form-group><label for=filterTree>Tree:</label><input id=filterTree ng-model=scope.filterPath typeahead="tree.path for tree in getRepoTree($viewValue)" typeahead-on-select="pathSelected($item, $model, $label)" typeahead-append-to-body=true typeahead-focus-first=true class="form-control input-sm"></div></form></div></div><div class=panel-body><div ng-if=filter.isFetchingCommits class=well>Fetching commits for {{scope.selectedRepo.full_name}} - {{scope.selectedBranch}}</div><div class=col-lg-12 ng-if="commits.length > 0"><pagination total-items=commitsLength items-per-page=20 ng-model=scope.currentPage max-size=5 class=pagination-sm boundary-links=true rotate=false></pagination><ghreview-commit-list data-commit-list=commits data-filter=filter></ghreview-commit-list><pagination total-items=commitsLength items-per-page=20 ng-model=scope.currentPage max-size=5 class=pagination-sm boundary-links=true rotate=false></pagination></div></div></div><div class="alert alert-danger" role=alert ng-if=showError>{{error}}</div><div class="alert alert-danger" role=alert ng-if=showDefaultError>You found a potential bug in gh-review. Please help on making gh-review better and report it by following <a class=alert-link href=https://github.com/Dica-Developer/gh-review/issues/new>this link</a>.</div></div></div></div>'),a.put("app/module/module.html",'<div ng-include="\'components/menu/menu.html\'"></div><div id=main class=container-fluid><div id=search class="row review-overview"><div class=col-lg-12><div class=input-group><input ng-model=searchString name=searchString type=search id=searchValue class=form-control placeholder="review modules repo:Dica-Developer/gh-review"><div class=input-group-btn><button ng-click=doSearch() id=searchButton type=button class="btn btn-default">Search</button></div></div><div class=row><div class=col-md-12><ul id=commitList class=list-group></ul></div></div></div></div><div class=row><div class=col-md-12><ul id=commitList class=list-group><a ng-repeat="item in result" ui-sref="file({user: item.repository.owner.login, repo: item.repository.name, sha: \'master\', path: item.path})" class=list-group-item>{{item.path}}</a></ul></div></div></div>'),a.put("app/standup/standup.html",'<div ng-include="\'components/menu/menu.html\'"></div><div id=main class=container-fluid><div class=row><div class=col-xs-12><a ui-sref=listFilter()>Back to filter list</a></div></div><div class=row><div class=col-xs-12><div class=panel ng-class="{\'panel-danger\': !filter.isHealthy(), \'panel-default\': filter.isHealthy()}"><div ng-if=!filter.isHealthy() class=panel-heading><h4>The filter with {{filter.getOwner()}}/{{filter.getRepo()}}/{{filter.getBranch()}} is broken.</h4><h5>Please <a ui-sref="editFilter({filterId: filter.getId()})">edit</a> the filter settings.</h5></div><div ng-if=filter.isHealthy() class=panel-heading><h4><span ng-show=fetchingCommits>Fetching commits</span><span ng-show=!fetchingCommits>Showing commits</span> of {{filter.getOwner()}}/{{filter.getRepo()}}/{{filter.getBranch()}} of the last 24 hours.</h4><h5 ng-show="!fetchingCommits && commits.length === 0">It seems nothing happened in the last 24 hours!</h5></div><div class="panel-body collapse"></div></div><div ng-if=!fetchingCommits><ghreview-commit-list data-commit-list=commits data-filter=filter></ghreview-commit-list></div></div></div></div>'),a.put("app/welcome/welcome.html",'<div ng-include="\'components/menu/menu.html\'"></div><div id=main class=container-fluid><div id=welcomeMessage class=jumbotron><h1>github review</h1><p>Gh-review works with your github user account to review the code in your connected repositories. Free for open source, pro accounts for private repos, instant sign up with GitHub OAuth.</p><p><a name=gh-review_login class="btn btn-primary btn-lg" role=button href=#login>FREE SIGN UP</a> <a name=gh-review_proaccount class="btn btn-primary btn-lg" role=button href=https://github.com/Dica-Developer/gh-review>PRO ACCOUNT</a></p></div></div>'),a.put("app/whoami/whoami.html",'<div ng-include="\'components/menu/menu.html\'"></div><div id=main class=container-fluid><ul class=list-group><li class=list-group-item ng-repeat="(key, value) in userData">{{key}}: {{ value }}</li></ul></div>'),a.put("components/menu/menu.html",'<div class="navbar navbar-default navbar-fixed-top" ng-controller=MenuController><div class=container-fluid><div class=navbar-header><button class=navbar-toggle type=button ng-click="isCollapsed = !isCollapsed"><span class=sr-only>Toggle navigation</span> <span class=icon-bar></span> <span class=icon-bar></span> <span class=icon-bar></span></button> <a class=navbar-brand href="#/">GH-REVIEW</a></div><div collapse=isCollapsed class="navbar-collapse collapse" id=navbar-main><ul class="nav navbar-nav"><li ng-repeat="item in menu" ui-sref-active=active ng-show=isAuthenticated()><a id={{item.id}} ui-sref={{item.link}}>{{item.title}}</a></li></ul><ul ng-hide=isAuthenticated() id=submenu-notauthenticated class="nav navbar-nav navbar-right"><li><div id=loginLogoutContainer style="padding-right: 15px"><a ui-sref=login class="btn btn-default navbar-btn" role=button>Sign in with Github</a></div></li></ul><ul ng-show=isAuthenticated() id=submenu-authenticated class="nav navbar-nav navbar-right"><li class=dropdown><a href=# class=dropdown-toggle data-toggle=dropdown>{{ name }}<b class=caret></b></a><ul id=userMenuDropdown class=dropdown-menu><li ng-repeat="item in submenu" ng-switch=item.linkType><a ng-switch-when=href id={{item.id}} href={{item.link}}>{{item.title}}</a> <a ng-switch-default id={{item.id}} ui-sref={{item.link}}>{{item.title}}</a></li></ul></li></ul></div></div></div>'),a.put("components/modal/modal.html",'<div class=modal-header><button ng-if=modal.dismissable type=button ng-click=$dismiss() class=close>&times;</button><h4 ng-if=modal.title ng-bind=modal.title class=modal-title></h4></div><div class=modal-body><p ng-if=modal.text ng-bind=modal.text></p><div ng-if=modal.html ng-bind-html=modal.html></div></div><div class=modal-footer><button ng-repeat="button in modal.buttons" ng-class=button.classes ng-click=button.click($event) ng-bind=button.text class=btn></button></div>'),a.put("components/modal/select-filter-to-import.html",'<div class=modal-header><button ng-if=modal.dismissable type=button ng-click=$dismiss() class=close>&times;</button><h4 ng-if=modal.title ng-bind=modal.title class=modal-title></h4></div><div class=modal-body><ul class=list-group><li ng-repeat="filter in modal.filterList | orderBy:\'options.repo\'" class=list-group-item><span ng-show=filter.getRepo()><strong>Repo:</strong>{{ filter.getRepo() }}</span> <span ng-show=filter.getBranch()><strong>Branch:</strong>{{ filter.getBranch() }}</span> <span ng-hide=!filter.getSinceDate()><strong>Since:</strong><formatted-date date=filter.getSinceDate()></formatted-date></span> <span ng-show=filter.getAuthors()><strong>Authors:</strong>{{ filter.getAuthors() }}</span> <span ng-hide=!filter.getState()><strong>Review State:</strong>{{ filter.getState() }}</span><div class=pull-right><input type=checkbox value=modal.filterInList(filter) ng-click=modal.toggleFilter(filter)></div></li></ul></div><div class=modal-footer><button ng-repeat="button in modal.buttons" ng-class=button.classes ng-click=button.click($event) ng-bind=button.text class=btn></button></div>')
}]);