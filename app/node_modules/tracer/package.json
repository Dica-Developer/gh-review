{
		"name": "tracer",
		"description": "A powerful and customizable logging library for node.js. support color console with timestamp, line number, method name, file name and call stack. you can set transport to file, stream, database(ex: mongodb and clouddb, simpledb). keywords: log, logger, trace ",
		"homepage": "http://github.com/baryon/tracer",
		"repository": {
		"type": "git",
		"url": "git://github.com/baryon/tracer.git"
		},
		"version": "0.6.2",
		"author": {
		"name": "LI Long",
		"email": "lilong@gmail.com"
		},
		"dependencies": {
		"dateformat": "1.0.2-1.2.3",
		"colors": ">=0.6.0",
		"tinytim": ">=0.1.0"
		},
		"devDependencies": {
		"expresso": "0.9.2",
		"mongoskin": "0.3.0"
		},
		"main": "./lib/index",
		"keywords": [
		"log",
		"logger",
		"trace"
		],
		"scripts": {
		"test": "expresso test/*"
		},
		"engines": {
		"node": ">= 0.2.0"
		},
		"readme": "#tracer for node.js  [![Build Status](https://secure.travis-ci.org/baryon/tracer.png)](http://travis-ci.org/baryon/tracer)\n\nA powerful and customizable logging library for node.js.\n\n===========\n##Features\n-----\n\n* print log messages with timstamp, file name, method name, line number, path or call stack\n* be customized output format with micro-template and timestamp format\n* support user-defined logging levels\n* add easily any transport \n* support filter functions, so print statements in full color and font (color console)\n\n##Install\n-----\n```javascript\nnpm install tracer\n```\n\nUsage\n-----\nAdd to your code:\n\nSimple Console  \n\n```javascript\nvar logger = require('tracer').console();\n```\n\n\nColor Console  \n\n```javascript\nvar logger = require('tracer').colorConsole();\n```\n\nSet Output Level  \n\n```javascript\nvar logger = require('tracer').colorConsole({level:'warn'});\n```\n\n\nSimple Example\n--------------\n\n\n\n### Simple Console\n\n```javascript\nvar logger = require('tracer').console();\n\nlogger.log('hello');\nlogger.trace('hello', 'world');\nlogger.debug('hello %s',  'world', 123);\nlogger.info('hello %s %d',  'world', 123, {foo:'bar'});\nlogger.warn('hello %s %d %j', 'world', 123, {foo:'bar'});\nlogger.error('hello %s %d %j', 'world', 123, {foo:'bar'}, [1, 2, 3, 4], Object);\n\n$ node example/console.js \n2012-03-02T13:35:22.83Z
<log>console.js:3 (Object.
	<anonymous>) hello\n2012-03-02T13:35:22.85Z
		<trace>console.js:4 (Object.
			<anonymous>) hello world\n2012-03-02T13:35:22.85Z
				<debug>console.js:5 (Object.
					<anonymous>) hello world 123\n2012-03-02T13:35:22.85Z
						<info>console.js:6 (Object.
							<anonymous>) hello world 123 { foo: 'bar' }\n2012-03-02T13:35:22.85Z
								<warn>console.js:7 (Object.
									<anonymous>) hello world 123 {\"foo\":\"bar\"}\n2012-03-02T13:35:22.85Z
										<error>console.js:8 (Object.
											<anonymous>) hello world 123 {\"foo\":\"bar\"} [ 1, 2, 3, 4 ] function Object() { [native code]
												}\n```\n\n### Color Console\n```javascript\nvar logger =
												require('tracer').colorConsole();\n\nlogger.log('hello');\nlogger.trace('hello',
												'world');\nlogger.debug('hello %s', 'world', 123);\nlogger.info('hello %s %d', 'world', 123,
												{foo:'bar'});\nlogger.warn('hello %s %d %j', 'world', 123, {foo:'bar'});\nlogger.error('hello %s
												%d %j', 'world', 123, {foo:'bar'}, [1, 2, 3, 4], Object);\n```\n\n### Daily
												Log\n```javascript\nvar logger =
												require('tracer').dailyfile({root:'.'});\n\nlogger.log('hello');\nlogger.trace('hello',
												'world');\nlogger.debug('hello %s', 'world', 123);\nlogger.info('hello %s %d', 'world', 123,
												{foo:'bar'});\nlogger.warn('hello %s %d %j', 'world', 123, {foo:'bar'});\nlogger.error('hello %s
												%d %j', 'world', 123, {foo:'bar'}, [1, 2, 3, 4], Object);\n```\n\ndailylog will output all types
												log to diff files every day like log4j\n\nAdvanced Example\n---------------\nsome helper package
												is need, so install -dev for running examples\n\n```javascript\nnpm install -dev
												tracer\n```\n\n\nTake a look at the examples directory for different examples.\n\n### Set
												logging level\n\nthe level option support index (number) or method name.\n\n\n```javascript\nvar
												logger = require('tracer').console({level:'warn'});\n```\nequal\n\n```javascript\nvar logger =
												require('tracer').console({level:4});\n```\n\n\n```javascript\nvar logger =
												require('tracer').console({level:'warn'});\nlogger.log('hello');\nlogger.trace('hello',
												'world');\nlogger.debug('hello %s', 'world', 123);\nlogger.info('hello %s %d', 'world', 123,
												{foo:'bar'});\nlogger.warn('hello %s %d %j', 'world', 123, {foo:'bar'});\nlogger.error('hello %s
												%d %j', 'world', 123, {foo:'bar'}, [1, 2, 3, 4], Object);\n\n//$ node example/level.js
												\n//2012-03-02T13:41:33.29Z
												<warn>level.js:6 (Object.
													<anonymous>) hello world 123 {\"foo\":\"bar\"}\n//2012-03-02T13:41:33.30Z
														<error>level.js:7 (Object.
															<anonymous>) hello world 123 {\"foo\":\"bar\"} [ 1, 2, 3, 4 ] function Object() { [native
																code] }\n\n//log,trace, debug and info level was not ouputed \n\n```\n\n\n\n###
																Customize output format\nformat tag: \n\n* timestamp: current time \n* title: method
																name, default is 'log', 'trace', 'debug', 'info', 'warn', 'error' \n* level: method
																level, default is 'log':0, 'trace':1, 'debug':2, 'info':3, 'warn':4, 'error':5 \n*
																message: printf message, support %s string, %d number, %j JSON and auto inspect \n*
																file: file name \n* line: line number \n* pos: postion \n* path: file's path \n* method:
																method name of caller \n* stack: call stack message \n \nwe use tinytim micro-template
																system to output log. see details [tinytim](https://github.com/baryon/node-tinytim).
																\nand, we use [Date Format](http://blog.stevenlevithan.com/archives/date-time-format) to
																format datetime. \n\n\n\n```javascript\nvar logger =
																require('tracer').console(\n\t\t\t\t{\n\t\t\t\t\tformat : \"{{timestamp}}<{{title}}>
																{{message}} (in {{file}}:{{line}})\",\n\t\t\t\t\tdateformat :
																\"HH:MM:ss.L\"\n\t\t\t\t});\n\n```\n\n\nOr, you can set special format for output
																method\n\n```javascript\nvar logger =
																require('tracer')\n\t\t.colorConsole(\n\t\t\t\t{\n\t\t\t\t\tformat : [\n\t\t\t\t\t
																\"{{timestamp}}<{{title}}> {{message}} (in {{file}}:{{line}})\", //default
																format\n\t\t\t\t\t {\n\t\t\t\t\t \t error : \"{{timestamp}}<{{title}}> {{message}} (in
																{{file}}:{{line}})\\nCall Stack:\\n{{stack}}\" // error format\n\t\t\t\t\t
																}\t\n\t\t\t\t\t],\n\t\t\t\t\tdateformat : \"HH:MM:ss.L\",\n\t\t\t\t\tpreprocess :
																function(data){\n\t\t\t\t\t\tdata.title =
																data.title.toUpperCase();\n\t\t\t\t\t}\n\t\t\t\t});\n```\n\nthe preprocess method is a
																choice for changing tag. \n \n\n\n### Customize output methods\n\n```javascript\nvar
																colors = require('colors');\n\nvar logger = require('tracer').colorConsole({\n\tlevel :
																'log1',\n\tmethods : [ 'log0', 'log1', 'log2', 'log3', 'log4', 'log5' ],\n\tfilters :
																[colors.underline, colors.yellow],\n\n});\nlogger.log0('hello');\nlogger.log1('hello',
																'world');\nlogger.log2('hello %s', 'world', 123);\nlogger.log4('hello %s %d', 'world',
																123);\nlogger.log5('hello %s %d', 'world', 123);\n```\n\n\n\n### Customize filters
																\n\neach filtes function was called. the function is synchronous and must be
																like\n\n```javascript\nfunction f1(str) {\n\treturn str.toUpperCase();\n}\n```\n\nor you
																can use the second parameter\n\n```javascript\nfunction f1(str, data) {\n\tif(
																data.title === 'error' ){\n\t\t//do some thing, example write to database, you can use
																async write to do this\n\t\t\n\t\t//if you don't want continue other filter, then
																\n\t\t//return false; \n\t}\n\treturn str.toUpperCase();\n}\n```\n\n\nAbout
																[Colors.js](https://github.com/Marak/colors.js)\n\n```javascript\nvar colors =
																require('colors');\nvar logger = require('tracer').colorConsole({\n\tfilters : [\n\t f1,
																colors.underline, colors.blue, //default filter\n\t //the last item can be custom
																filter. here is \"warn\" and \"error\" filter\n\t {\n\t \t warn : colors.yellow,\n\t \t
																error : [f1, colors.red, colors.bold ]\n\t }\n\t]\n});\n\n```\n\nthe filter support
																key-function pair, example:
																[color_console.js](https://github.com/baryon/tracer/blob/master/lib/color_console.js)\n\n```javascript\n{\n\t\tfilters
																: {\n\t\t\t//log : colors.black,\n\t\t\ttrace : colors.magenta,\n\t\t\tdebug :
																colors.blue,\n\t\t\tinfo : colors.green,\n\t\t\twarn : colors.yellow,\n\t\t\terror : [
																colors.red, colors.bold ]\n\t\t}\n}\n```\n\nand the filters is an array, the last item
																can be custom filter. see
																example:[filter.js](https://github.com/baryon/tracer/blob/master/example/filter.js)\n\t\n###
																Log File Transport\n```javascript\nvar fs = require('fs');\n\nvar logger =
																require('tracer').console({\n\ttransport : function(data)
																{\n\t\tconsole.log(data.output);\n\t\tfs.open('./file.log', 'a', 0666, function(e, id)
																{\n\t\t\tfs.write(id, data.output+\"\\n\", null, 'utf8', function()
																{\n\t\t\t\tfs.close(id, function()
																{\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n});\n\nlogger.log('hello');\nlogger.trace('hello',
																'world');\nlogger.debug('hello %s', 'world', 123);\nlogger.info('hello %s %d', 'world',
																123, {foo : 'bar'});\nlogger.warn('hello %s %d %j', 'world', 123, {foo :
																'bar'});\nlogger.error('hello %s %d %j', 'world', 123, {foo : 'bar'}, [ 1, 2, 3, 4 ],
																Object);\n\n```\n\n### Stream Transport\n```javascript\nvar fs = require('fs');\n\nvar
																logger = require('tracer').console({\n\t\ttransport : function(data)
																{\n\t\t\tconsole.log(data.output);\n\t\t\tvar stream =
																fs.createWriteStream(\"./stream.log\", {\n\t\t\t flags: \"a\",\n\t\t\t encoding:
																\"utf8\",\n\t\t\t mode:
																0666\n\t\t\t}).write(data.output+\"\\n\");\n\t\t}\n});\n\nlogger.log('hello');\nlogger.trace('hello',
																'world');\nlogger.debug('hello %s', 'world', 123);\nlogger.info('hello %s %d', 'world',
																123, {foo:'bar'});\nlogger.warn('hello %s %d %j', 'world', 123,
																{foo:'bar'});\nlogger.error('hello %s %d %j', 'world', 123, {foo:'bar'}, [1, 2, 3, 4],
																Object);\n\n```\n\n### MongoDB Transport\n```javascript\nvar mongo =
																require('mongoskin');\nvar db =
																mongo.db(\"127.0.0.1:27017/test?auto_reconnect\");\n\nvar log_conf = {\n\t\ttransport :
																function(data) {\n\t\t\tconsole.log(data.output);\n\t\t\tvar loginfo =
																db.collection(\"loginfo\");\n\t\t\tloginfo.insert( data, function(err, log)
																{\n\t\t\t\tif (err)
																{\n\t\t\t\t\tconsole.error(err);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n}\n\nvar logger =
																require('tracer').console(log_conf);\n\nlogger.log('hello');\nlogger.trace('hello',
																'world');\nlogger.debug('hello %s', 'world', 123);\nlogger.info('hello %s %d', 'world',
																123, {foo:'bar'});\nlogger.warn('hello %s %d %j', 'world', 123,
																{foo:'bar'});\nlogger.error('hello %s %d %j', 'world', 123, {foo:'bar'}, [1, 2, 3, 4],
																Object);\n\nconsole.log('\\n\\n\\npress ctrl-c to exit');\n\n```\n\n\n### Define your
																logging helper\n\nthe work is like
																[color_console.js](https://github.com/baryon/tracer/blob/master/lib/color_console.js)\n\n```javascript\nvar
																colors = require('colors');\nmodule.exports = function(conf) {\n\treturn
																require('./console')({\n\t\tfilters : {\n\t\t\t//log : colors.black,\n\t\t\ttrace :
																colors.magenta,\n\t\t\tdebug : colors.blue,\n\t\t\tinfo : colors.green,\n\t\t\twarn :
																colors.yellow,\n\t\t\terror : [ colors.red, colors.bold ]\n\t\t}\n\t},
																conf);\n};\n```\n\n### Customize output Object's properties\n\n```javascript\nvar obj =
																{Request: \n [ { IsValid: [ 'True' ],\n ItemSearchRequest: \n [ { ResponseGroup: [
																'Small', 'OfferSummary' ],\n Sort: [ 'salesrank' ],\n SearchIndex: [ 'DVD']\n }\n ]\n }
																] };\n \nvar logger = require('tracer').console({\n\t\tshowHidden : true, //the object's
																non-enumerable properties will be shown too\n\t\tdepth : null //tells inspect how many
																times to recurse while formatting the object. This is useful for inspecting large
																complicated objects. Defaults to 2. To make it recurse indefinitely pass
																null.\n\t});\nlogger.log(obj);\n\n// \n// 2013-09-30T04:30:44.927Z
																<log>depth.js:26 (Object.
																	<anonymous>) { Request:\n// [ { IsValid: [ 'True', [length]: 1 ],\n//
																		ItemSearchRequest:\n// [ { ResponseGroup: [ 'Small', 'OfferSummary', [length]: 2
																		],\n// Sort: [ 'salesrank', [length]: 1 ],\n// SearchIndex: [ 'DVD', [length]: 1 ]
																		},\n// [length]: 1 ] },\n// [length]: 1 ] }\n \n```\n\n\n\t\n## History\n###
																		0.6.2\n\n* fixed: change stack from array to string, and fixed example2.js\n\n###
																		0.6.1\n\n* fixed: get the filename correctly on windows. thanks Tom Carchrae\n*
																		added: added missing repository field. thanks madarche \n\n### 0.6.0\n\n* feature:
																		add showHidden and depth option for showing object's properties. \n\n### 0.5.1\n\n*
																		feature: add args into data object, now we can check args in preprocess, see example
																		format2.js, merge from yasuyk04/work \n\n### 0.5.0\n\n* performance: speed up when
																		the format don't include method,path,line,pos,file, thanks sharonjl's issue report
																		\n\n### 0.4.2\n\n* fixed: debug color from blue to cyan \n\n### 0.4.1\n\n* fixed:
																		default timestamp is ISO UTC format. \n\n### 0.4.0\n\n* feature: support dailyfile
																		method, added some examples \n* feature: add preprocess custom method for changing
																		tags before format\n\n### 0.3.5\n\n* fixed bug: can't get method/line number in
																		express \n\n### 0.3.4\n\n* use [tinytim
																		package](https://github.com/baryon/node-tinytim) \n\n### 0.3.3\n\n* spell missing
																		(transpot->transport) \n\n### 0.3.2\n\n* speed-up for _log function \n* add some
																		test codes \n\n### 0.3.1\n\n* minor-fix for call stack\n\n### 0.3.0\n\n* support
																		custom format and filter for special method\n\n### 0.2.1\n\n* fix spell
																		missing\n\n### 0.2.0\n\n* Add more examples.\n* Default methods is log, trace,
																		debug, info, warn, error.\n* Support 'string' level, {level:'warn'} equal
																		{level:4}\n\n### 0.1.0\n\n* Initial Tracer implementation.\n\n## License \n\n(The
																		MIT License)\n\nCopyright (c) 2012 LI Long &lt;lilong@gmail.com&gt;\n\nPermission is
																		hereby granted, free of charge, to any person obtaining\na copy of this software and
																		associated documentation files (the\n'Software'), to deal in the Software without
																		restriction, including\nwithout limitation the rights to use, copy, modify, merge,
																		publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit
																		persons to whom the Software is furnished to do so, subject to\nthe following
																		conditions:\n\nThe above copyright notice and this permission notice shall
																		be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE
																		IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING
																		BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR
																		PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
																		LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
																		CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH
																		THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
																		"readmeFilename": "README.md",
																		"bugs": {
																		"url": "https://github.com/baryon/tracer/issues"
																		},
																		"_id": "tracer@0.6.2",
																		"dist": {
																		"shasum": "884bb0553a34c9b6d5a9cfc7b96d95db531d121f"
																		},
																		"_from": "tracer@",
																		"_resolved": "https://registry.npmjs.org/tracer/-/tracer-0.6.2.tgz"
																		}
